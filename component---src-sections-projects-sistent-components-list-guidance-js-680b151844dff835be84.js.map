{"version":3,"file":"component---src-sections-projects-sistent-components-list-guidance-js-680b151844dff835be84.js","mappings":"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","sources":["webpack://Layer5/./src/components/SistentNavigation/intra-page.js","webpack://Layer5/./src/sections/Projects/Sistent/sistent-layout.js","webpack://Layer5/./src/sections/Projects/Sistent/components/list/guidance.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { Link } from \"gatsby\";\nimport styled from \"styled-components\";\n\nconst JoinCommunityWrapper = styled.div`\n  width: 18rem;\n\n  @media screen and (max-width: 750px) {\n    display: none;\n  }\n\n  @media screen and (min-width: 751px) and (max-width: 1279px) {\n    display: none;\n  }\n  .intra-page {\n    position: sticky;\n    top: 10rem;\n    right: 0rem;\n    margin-right: 1rem;\n    padding-bottom: 5rem;\n    padding-right: 2rem;\n    align-items: left;\n    justify-content: space-around;\n    display: flex;\n    flex-direction: column;\n    overflow: hidden;\n\n    .list {\n      color: #000000;\n    }\n    .active {\n      font-weight: 5000;\n      color: #000000;\n    }\n\n    ul {\n      list-style: none;\n      top: 3rem;\n      li {\n        padding-bottom: 0.5rem;\n        padding-top: 0.5rem;\n      }\n    }\n    @media only screen and (min-width: 1280px) and (max-width: 1350px) {\n      padding-right: 0rem;\n      margin-right: 0rem;\n    }\n    @media only screen and (max-width: 950px) {\n      width: 0;\n      opacity: 0;\n      height: 0;\n      transition: none;\n      visibility: hidden;\n    }\n  }\n\n  .learn {\n    width: 10rem;\n  }\n`;\n\nfunction IntraPage() {\n  const [contents, setContents] = useState([]);\n\n  useEffect(() => {\n    const anchors = document.querySelectorAll(\".main-content > a\");\n    console.log(anchors);\n    if (anchors) {\n      setContents(\n        Array.from(anchors).map((a) => ({\n          id: a.id,\n          link: `#${a.id}`,\n          text: a.id,\n        }))\n      );\n    }\n  }, []);\n\n  const [intapath, setIntapath] = useState(null);\n  useEffect(() => {\n    const path = window.location.pathname;\n    setIntapath(path);\n  }, []);\n\n  return (\n    <JoinCommunityWrapper>\n      <div className=\"intra-page\">\n        <ul>\n          {contents.map((x) => (\n            <li key={x.id} className=\"list\">\n              <Link\n                to={`${intapath}${x.link}`}\n                key={x.id}\n                activeClassName=\"active\"\n              >\n                {x.text}\n              </Link>\n            </li>\n          ))}\n        </ul>\n      </div>\n    </JoinCommunityWrapper>\n  );\n}\n\nexport default IntraPage;\n","import React from \"react\";\nimport SistentWrapper from \"./sistent.style\";\nimport TOC from \"../../../components/SistentNavigation\";\nimport { Container } from \"../../../reusecore/Layout\";\nimport SistentPagination from \"../../../components/SistentNavigation/pagination\";\nimport IntraPage from \"../../../components/SistentNavigation/intra-page\";\n\nexport const SistentLayout = ({ title, children }) => {\n  return (\n    <SistentWrapper>\n      <div className=\"page-header-section\">\n        <h1>{title}</h1>\n      </div>\n      <TOC />\n      <div className=\"page-section\">\n        <Container>\n          {children} <SistentPagination />\n        </Container>\n        <IntraPage />\n      </div>\n    </SistentWrapper>\n  );\n};\n","import React from \"react\";\nimport { navigate } from \"gatsby\";\nimport { useLocation } from \"@reach/router\";\nimport { SistentLayout } from \"../../sistent-layout\";\nimport TabButton from \"../../../../../reusecore/Button\";\n\nconst ListGuidance = () => {\n  const location = useLocation();\n\n  return (\n    <SistentLayout title=\"List\">\n      <div className=\"content\">\n        <a id=\"Identity\">\n          <h2>List</h2>\n        </a>\n        <p>\n          Lists are essential UI elements that allow items to be organized sequentially in a structured and readable way. They help users view, select, and interact with multiple items conveniently.\n        </p>\n\n        <div className=\"filterBtns\">\n          <TabButton\n            className={location.pathname === \"/projects/sistent/components/list\" ? \"active\" : \"\"}\n            onClick={() => navigate(\"/projects/sistent/components/list\")}\n            title=\"Overview\"\n          />\n          <TabButton\n            className={location.pathname === \"/projects/sistent/components/list/guidance\" ? \"active\" : \"\"}\n            onClick={() => navigate(\"/projects/sistent/components/list/guidance\")}\n            title=\"Guidance\"\n          />\n          <TabButton\n            className={location.pathname === \"/projects/sistent/components/list/code\" ? \"active\" : \"\"}\n            onClick={() => navigate(\"/projects/sistent/components/list/code\")}\n            title=\"Code\"\n          />\n        </div>\n\n        <div className=\"main-content\">\n          <p>\n            Lists can be used for various purposes, including displaying items, navigational menus, or highlighting features. The List component provides a flexible container for organizing related items in a vertical layout. It can be customized to display items with icons, buttons, avatars, and other interactive elements. This component is essential for organizing content in a structured, accessible format.\n          </p>\n\n          <a id=\"Usage Scenarios\">\n            <h2>Usage Scenarios</h2>\n          </a>\n          <ul>\n            <li>Data Display : Present structured data like files, tasks, or messages using Lists.</li>\n            <li>Navigational Menus : Combine List Items with Buttons or Links for intuitive menus.</li>\n            <li>Interactive Content : Add action buttons to List Items for task management or settings. </li>\n          </ul>\n\n          <a id=\"Design Guidelines\">\n            <h2>Design Guidelines</h2>\n          </a>\n\n          <p>Consistency</p>\n          <ul>\n            <li>Maintain a uniform structure across all List Items.</li>\n            <li>Use consistent padding and alignment for easy readability.</li>\n          </ul>\n          <p>Interactive Elements</p>\n          <ul>\n            <li>Use ListItemButton for click actions.</li>\n            <li> Ensure hover states and focus indicators are visually prominent.</li>\n          </ul>\n          <p>Accessibility</p>\n          <ul>\n            <li>Provide descriptive labels for screen readers.</li>\n            <li>Ensure all items are navigable via keyboard.</li>\n          </ul>\n\n          <a id=\"General Guidelines\">\n            <h2>General Guidelines</h2>\n          </a>\n\n          <p>1. Purpose & Context</p>\n          <ul>\n            <li>Clearly define the purpose of the List (e.g., data grouping, navigation, task management).</li>\n            <li>Use Lists where a vertical layout enhances user understanding or accessibility.</li>\n          </ul>\n          <p>2. Spacing & Alignment</p>\n          <ul>\n            <li>Maintain consistent vertical spacing between items.</li>\n            <li>Align text, icons, and avatars for a clean, organized appearance.</li>\n            <li>Consistent spacing and alignment ensure list items are visually pleasing and easy to scan. Items should be aligned to the left, with adequate padding between elements.</li>\n          </ul>\n          <p>3. Interactive Design</p>\n          <ul>\n            <li>For interactive Lists, use actionable items like ListItemButton and ensure buttons or links have proper visual cues (hover/focus states).</li>\n            <li>Add affordances like icons or colors to signify item state (e.g., completed, active, or disabled).</li>\n          </ul>\n          <p>4. Accessibility</p>\n          <ul>\n            <li>Label all List Items using aria-label or aria-labelledby attributes for screen readers.</li>\n            <li>Ensure all interactive elements within a List are keyboard-navigable and have clear focus indicators.</li>\n          </ul>\n\n\n          <a id=\"Component-Specific Guidance\">\n            <h2>Component-Specific Guidance</h2>\n          </a>\n          <p>1. List</p>\n          <ul>\n            <li>Use the List component as a wrapper for items, ensuring adequate padding and structure.</li>\n            <li>Keep Lists concise; avoid excessive scrolling by grouping items with ListSubheader.</li>\n          </ul>\n          <p>2. List Item</p>\n          <ul>\n            <li>Limit content to 1-2 lines of text for readability.</li>\n            <li>Use secondary text sparingly to avoid visual clutter.</li>\n          </ul>\n          <p>3. List Item Button</p>\n          <ul>\n            <li>Ensure actionable buttons have a clear purpose, communicated via labels or icons.</li>\n            <li>Avoid excessive buttons in a single List to prevent overwhelming users.</li>\n          </ul>\n          <p>4. List Item Icon</p>\n          <ul>\n            <li>Icons should be meaningful and contextually relevant (e.g., CheckIcon for completed tasks, NotificationsIcon for notifications).</li>\n            <li>Align and size icons appropriately relative to the text.</li>\n          </ul>\n          <p>5. List Item Avatar</p>\n          <ul>\n            <li>Use avatars to represent users or entities visually</li>\n            <li>Provide accessible alternatives (e.g., initials or placeholders) when images are unavailable.</li>\n          </ul>\n          <p>6. List Item Text</p>\n          <ul>\n            <li>Maintain a clear hierarchy between primaryText (main content) and secondaryText (supporting details).</li>\n            <li>Ensure text is legible and does not dominate the layout.</li>\n          </ul>\n          <p>7. List Subheader</p>\n          <ul>\n            <li>Subheaders should describe the group of items succinctly.</li>\n            <li>Avoid excessive nesting of subheaders to prevent user confusion.</li>\n          </ul>\n        </div>\n      </div>\n    </SistentLayout>\n  );\n};\nexport default ListGuidance;"],"names":["JoinCommunityWrapper","styled","div","withConfig","displayName","componentId","contents","setContents","useState","useEffect","anchors","document","querySelectorAll","console","log","Array","from","map","a","id","link","text","intapath","setIntapath","path","window","location","pathname","React","className","x","key","Link","to","activeClassName","SistentLayout","_ref","title","children","SistentWrapper","TOC","Container","SistentPagination","IntraPage","ListGuidance","useLocation","TabButton","onClick","navigate"],"sourceRoot":""}