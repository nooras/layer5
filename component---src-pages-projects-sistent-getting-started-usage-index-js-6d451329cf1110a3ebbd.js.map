{"version":3,"file":"component---src-pages-projects-sistent-getting-started-usage-index-js-6d451329cf1110a3ebbd.js","mappings":"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","sources":["webpack://Layer5/./src/sections/Projects/Sistent/components/button/code-block.js","webpack://Layer5/./src/sections/Projects/Sistent/getting-started/usage/index.js","webpack://Layer5/./src/pages/projects/sistent/getting-started/usage/index.js","webpack://Layer5/./src/components/handbook-navigation/intra-page.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport Code from \"../../../../../components/CodeBlock\";\n\nexport const CodeBlock = ({ name, code }) => {\n  const [showCode, setShowCode] = useState(false);\n  const onChange = () => {\n    setShowCode((prev) => !prev);\n  };\n  return (\n    <div className=\"show-code\">\n      <input type=\"checkbox\" name={name} id={name} onChange={onChange} />\n      <label htmlFor={name} className=\"label\">\n        Show Code\n      </label>\n      {showCode && (\n        <Code codeString={code} language=\"javascript\" />\n      )}\n    </div>\n  );\n};\n","import React from \"react\";\nimport { Container } from \"../../../../../reusecore/Layout\";\nimport SistentWrapper from \"../../sistent.style\";\nimport TOC from \"../../../../../components/SistentNavigation\";\nimport IntraPage from \"../../../../../components/handbook-navigation/intra-page\";\nimport SistentPagination from \"../../../../../components/SistentNavigation/pagination\";\nimport { useStyledDarkMode } from \"../../../../../theme/app/useStyledDarkMode\";\nimport { CodeBlock } from \"../../components/button/code-block\";\nimport { SistentThemeProvider } from \"@sistent/sistent\";\nimport { Button, TextField, Card, CardContent, Typography, Alert } from \"@sistent/sistent\";\n\nconst contents = [\n  { id: 0, link: \"#overview\", text: \"Overview\" },\n  { id: 1, link: \"#theme-provider\", text: \"Theme Provider\" },\n  { id: 2, link: \"#component-examples\", text: \"Component Examples\" },\n  { id: 3, link: \"#advanced-usage\", text: \"Advanced Usage\" },\n  { id: 4, link: \"#best-practices\", text: \"Best Practices\" }\n];\n\nconst codeExamples = {\n  basicUsage: `import { SistentThemeProvider } from \"@sistent/sistent\";\nimport { Button } from \"@sistent/sistent\";\n\nfunction App() {\n  return (\n    <SistentThemeProvider>\n      <Button variant=\"contained\" color=\"primary\">\n        Hello Sistent!\n      </Button>\n    </SistentThemeProvider>\n  );\n}`,\n\n  themeProvider: `import { SistentThemeProvider } from \"@sistent/sistent\";\n\nfunction App() {\n  return (\n    <SistentThemeProvider \n      initialMode=\"dark\" // \"light\" | \"dark\" | \"system\"\n    >\n      {/* Your app components go here */}\n      <YourAppContent />\n    </SistentThemeProvider>\n  );\n}`,\n\n  buttonVariants: `import { Button, Stack } from \"@sistent/sistent\";\n\nfunction ButtonExamples() {\n  return (\n    <Stack direction=\"row\" spacing={2}>\n      <Button variant=\"contained\" color=\"primary\">\n        Contained\n      </Button>\n      <Button variant=\"outlined\" color=\"secondary\">\n        Outlined\n      </Button>\n      <Button variant=\"text\">\n        Text Button\n      </Button>\n      <Button variant=\"contained\" disabled>\n        Disabled\n      </Button>\n    </Stack>\n  );\n}`,\n\n  formExample: `import React, { useState } from \"react\";\nimport { \n  Card, \n  CardContent, \n  Typography, \n  TextField, \n  Button,\n  Stack,\n  Box\n} from \"@sistent/sistent\";\n\nfunction ContactForm() {\n  const [formData, setFormData] = useState({\n    name: '',\n    email: '',\n    message: ''\n  });\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    console.log('Form submitted:', formData);\n  };\n\n  const handleChange = (field) => (e) => {\n    setFormData(prev => ({\n      ...prev,\n      [field]: e.target.value\n    }));\n  };\n\n  return (\n    <Card sx={{ maxWidth: 500, mx: 'auto', p: 2 }}>\n      <CardContent>\n        <Typography variant=\"h5\" component=\"h2\" gutterBottom>\n          Get in Touch\n        </Typography>\n        <Typography variant=\"body2\" color=\"text.secondary\" sx={{ mb: 3 }}>\n          Fill out the form below and we'll get back to you soon.\n        </Typography>\n        \n        <Box component=\"form\" onSubmit={handleSubmit}>\n          <Stack spacing={3}>\n            <TextField \n              label=\"Full Name\" \n              variant=\"outlined\" \n              fullWidth\n              required\n              value={formData.name}\n              onChange={handleChange('name')}\n            />\n            <TextField \n              label=\"Email Address\" \n              type=\"email\"\n              variant=\"outlined\" \n              fullWidth\n              required\n              value={formData.email}\n              onChange={handleChange('email')}\n            />\n            <TextField \n              label=\"Message\"\n              multiline\n              rows={4}\n              variant=\"outlined\" \n              fullWidth\n              value={formData.message}\n              onChange={handleChange('message')}\n            />\n            <Button \n              type=\"submit\"\n              variant=\"contained\" \n              color=\"primary\"\n              size=\"large\"\n              fullWidth\n            >\n              Send Message\n            </Button>\n          </Stack>\n        </Box>\n      </CardContent>\n    </Card>\n  );\n}`,\n\n  themeCustomization: `import { \n  SistentThemeProvider, \n  Button, \n  useTheme,\n  createTheme \n} from \"@sistent/sistent\";\n\n// Custom theme configuration\nconst customTheme = createTheme({\n  palette: {\n    primary: {\n      main: '#1976d2',\n      dark: '#115293',\n      light: '#42a5f5',\n    },\n    secondary: {\n      main: '#dc004e',\n    },\n  },\n  typography: {\n    h1: {\n      fontSize: '2.5rem',\n      fontWeight: 600,\n    },\n  },\n});\n\nfunction ThemedButton() {\n  const theme = useTheme();\n  \n  return (\n    <Button \n      variant=\"contained\"\n      sx={{ \n        backgroundColor: theme.palette.primary.main,\n        color: theme.palette.primary.contrastText,\n        '&:hover': {\n          backgroundColor: theme.palette.primary.dark,\n        },\n        borderRadius: 2,\n        textTransform: 'none',\n      }}\n    >\n      Custom Themed Button\n    </Button>\n  );\n}\n\nfunction App() {\n  return (\n    <SistentThemeProvider theme={customTheme}>\n      <ThemedButton />\n    </SistentThemeProvider>\n  );\n}`,\n\n  importStrategies: `// ✅ Recommended: Individual component imports\nimport { Button } from \"@sistent/sistent\";\nimport { TextField } from \"@sistent/sistent\";\nimport { Card, CardContent } from \"@sistent/sistent\";\n\n// ✅ Also good: Grouped imports for related components\nimport { \n  Typography,\n  Box,\n  Stack,\n  Container\n} from \"@sistent/sistent\";\n\n// ❌ Avoid: Importing everything (increases bundle size)\nimport * as Sistent from \"@sistent/sistent\";`,\n\n  iconUsage: `import { \n  Button, \n  IconButton, \n  Stack,\n  Tooltip\n} from \"@sistent/sistent\";\nimport { \n  Search as SearchIcon,\n  Menu as MenuIcon,\n  Download as DownloadIcon,\n  Favorite as FavoriteIcon\n} from \"@sistent/sistent\";\n\nfunction IconExamples() {\n  return (\n    <Stack direction=\"row\" spacing={2} alignItems=\"center\">\n      {/* Button with start icon */}\n      <Button \n        startIcon={<SearchIcon />} \n        variant=\"contained\"\n      >\n        Search\n      </Button>\n      \n      {/* Button with end icon */}\n      <Button \n        endIcon={<DownloadIcon />} \n        variant=\"outlined\"\n      >\n        Download\n      </Button>\n      \n      {/* Icon-only buttons */}\n      <Tooltip title=\"Menu\">\n        <IconButton aria-label=\"menu\" size=\"large\">\n          <MenuIcon />\n        </IconButton>\n      </Tooltip>\n      \n      <Tooltip title=\"Add to favorites\">\n        <IconButton aria-label=\"favorite\" color=\"secondary\">\n          <FavoriteIcon />\n        </IconButton>\n      </Tooltip>\n    </Stack>\n  );\n}`,\n\n  responsiveUsage: `import { \n  Card, \n  CardContent, \n  Typography,\n  Box\n} from \"@sistent/sistent\";\n\nfunction ResponsiveGrid() {\n  return (\n    <Box sx={{ p: 2 }}>\n      <div style={{ \n        display: \"grid\", \n        gap: \"16px\",\n        gridTemplateColumns: \"repeat(auto-fit, minmax(150px, 1fr))\"\n      }}>\n        <Card>\n          <CardContent>\n            <Typography variant=\"h6\" gutterBottom>\n              Responsive Card 1\n            </Typography>\n            <Typography variant=\"body2\" color=\"text.secondary\">\n              This card adapts to different screen sizes automatically.\n            </Typography>\n          </CardContent>\n        </Card>\n        \n        <Card>\n          <CardContent>\n            <Typography variant=\"h6\" gutterBottom>\n              Responsive Card 2\n            </Typography>\n            <Typography variant=\"body2\" color=\"text.secondary\">\n              On mobile, cards stack vertically for better readability.\n            </Typography>\n          </CardContent>\n        </Card>\n        \n        <Card>\n          <CardContent>\n            <Typography variant=\"h6\" gutterBottom>\n              Responsive Card 3\n            </Typography>\n            <Typography variant=\"body2\" color=\"text.secondary\">\n              Grid system provides flexible layouts across all devices.\n            </Typography>\n          </CardContent>\n        </Card>\n        \n        <Card>\n          <CardContent>\n            <Typography variant=\"h6\" gutterBottom>\n              Responsive Card 4\n            </Typography>\n            <Typography variant=\"body2\" color=\"text.secondary\">\n              Design system ensures visual unity.\n            </Typography>\n          </CardContent>\n        </Card>\n      </div>\n    </Box>\n  );\n}`\n};\n\nconst SistentUsage = () => {\n  const { isDark } = useStyledDarkMode();\n\n  return (\n    <SistentWrapper>\n      <div className=\"page-header-section\">\n        <h1>Usage Guide</h1>\n      </div>\n\n      <TOC />\n      <div className=\"page-section\">\n        <Container className=\"components-container\">\n          <div className=\"content\">\n            <a id=\"overview\">\n              <h2>Overview</h2>\n            </a>\n            <section>\n              <p>\n                After installing Sistent, you can immediately start using components in your React application.\n                The most important step is wrapping your application with the\n                <code> SistentThemeProvider </code>\n                 to ensure all components have access to the theme context.\n              </p>\n\n              <Alert severity=\"info\" sx={{ my: 2 }}>\n                <strong>Prerequisites:</strong> Ensure you have React 16.8+ and have installed Sistent using\n                <code style={{ margin: \"0 4px\" }}>npm install @sistent/sistent</code>\n              </Alert>\n\n              <h3>Quick Start Example</h3>\n              <p>\n                Here's the minimal setup to get started with Sistent:\n              </p>\n\n              <div className=\"showcase\">\n                <div className=\"items\">\n                  <SistentThemeProvider initialMode={isDark ? \"dark\" : \"light\"}>\n                    <Button variant=\"contained\" color=\"primary\">\n                      Hello Sistent!\n                    </Button>\n                  </SistentThemeProvider>\n                </div>\n                <CodeBlock name=\"basic-usage\" code={codeExamples.basicUsage} />\n              </div>\n            </section>\n\n            {/* Theme Provider Section */}\n            <h2>Theme Provider Setup</h2>\n            <section id=\"theme-provider\">\n              <p>\n                The <code>SistentThemeProvider</code> is the foundation of your Sistent application.\n                It provides theme context, manages color modes, and ensures consistent styling across all components.\n              </p>\n\n              <h3>Theme Configuration</h3>\n              <p>\n                Configure your theme provider with various options:\n              </p>\n\n              <div className=\"showcase\">\n                <CodeBlock name=\"Theme-provider\" code={codeExamples.themeProvider} />\n              </div>\n\n              <div className=\"parameter-table\">\n                <h4>Theme Provider Props</h4>\n                <table>\n                  <thead>\n                    <tr>\n                      <th>Prop</th>\n                      <th>Type</th>\n                      <th>Default</th>\n                      <th>Description</th>\n                    </tr>\n                  </thead>\n                  <tbody>\n                    <tr>\n                      <td><code>initialMode</code></td>\n                      <td><code>\"light\" | \"dark\" | \"system\"</code></td>\n                      <td><code>\"system\"</code></td>\n                      <td>Sets the initial color mode</td>\n                    </tr>\n                    <tr>\n                      <td><code>theme</code></td>\n                      <td><code>Theme</code></td>\n                      <td>Default theme</td>\n                      <td>Custom theme object</td>\n                    </tr>\n                    <tr>\n                      <td><code>children</code></td>\n                      <td><code>ReactNode</code></td>\n                      <td>-</td>\n                      <td>Your application components</td>\n                    </tr>\n                  </tbody>\n                </table>\n              </div>\n\n              <Alert severity=\"warning\" sx={{ my: 3 }}>\n                <strong>Important:</strong> Place the <code>SistentThemeProvider</code> at the root of your\n                component tree, typically in your <code>App.js</code> or <code>index.js</code> file.\n              </Alert>\n            </section>\n\n            {/* Component Examples Section */}\n            <section id=\"component-examples\">\n              <h2>Component Examples</h2>\n              <p>\n                Explore practical examples of Sistent components with different configurations and use cases.\n              </p>\n\n              <h3>Button Variations</h3>\n              <p>\n                Sistent provides multiple button variants, colors, and sizes to fit different design needs:\n              </p>\n\n              <div className=\"showcase\">\n                <div className=\"items\">\n                  <SistentThemeProvider initialMode={isDark ? \"dark\" : \"light\"}>\n                    <div style={{ display: \"flex\", gap: \"12px\", flexWrap: \"wrap\", alignItems: \"center\" }}>\n                      <Button variant=\"contained\" color=\"primary\">Contained</Button>\n                      <Button variant=\"outlined\" color=\"secondary\">Outlined</Button>\n                      <Button variant=\"text\">Text Button</Button>\n                      <Button variant=\"contained\" disabled>Disabled</Button>\n                    </div>\n                  </SistentThemeProvider>\n                </div>\n                <CodeBlock name=\"button-variants\" code={codeExamples.buttonVariants} />\n              </div>\n\n              <h3>Interactive Form Example</h3>\n              <p>\n                A complete form example showcasing multiple components working together:\n              </p>\n\n              <div className=\"showcase\">\n                <div className=\"items\">\n                  <SistentThemeProvider initialMode={isDark ? \"dark\" : \"light\"}>\n                    <Card sx={{ maxWidth: 500, mx: \"auto\" }}>\n                      <CardContent>\n                        <Typography variant=\"h5\" component=\"h2\" gutterBottom>\n                          Get in Touch\n                        </Typography>\n                        <Typography variant=\"body2\" color=\"text.secondary\" sx={{ mb: 3 }}>\n                          Fill out the form below and we'll get back to you soon.\n                        </Typography>\n                        <div style={{ display: \"flex\", flexDirection: \"column\", gap: \"16px\" }}>\n                          <TextField\n                            label=\"Full Name\"\n                            variant=\"outlined\"\n                            fullWidth\n                            size=\"small\"\n                          />\n                          <TextField\n                            label=\"Email Address\"\n                            type=\"email\"\n                            variant=\"outlined\"\n                            fullWidth\n                            size=\"small\"\n                          />\n                          <TextField\n                            label=\"Message\"\n                            multiline\n                            rows={3}\n                            variant=\"outlined\"\n                            fullWidth\n                            size=\"small\"\n                          />\n                          <Button\n                            variant=\"contained\"\n                            color=\"primary\"\n                            fullWidth\n                            sx={{ mt: 1 }}\n                          >\n                            Send Message\n                          </Button>\n                        </div>\n                      </CardContent>\n                    </Card>\n                  </SistentThemeProvider>\n                </div>\n                <CodeBlock name=\"form-example\" code={codeExamples.formExample} />\n              </div>\n            </section>\n\n            {/* Advanced Usage Section */}\n            <h2>Advanced Usage</h2>\n            <section id=\"advanced-usage\">\n\n              <h3>Theme Customization</h3>\n              <p>\n                Create custom themes and use the theme hook for advanced styling:\n              </p>\n\n              <div className=\"showcase\">\n                <CodeBlock name=\"theme-customization\" code={codeExamples.themeCustomization} />\n              </div>\n\n              <h3>Import Strategies</h3>\n              <p>\n                Optimize your bundle size with smart import strategies:\n              </p>\n\n              <div className=\"showcase\">\n                <CodeBlock name=\"import-strategies\" code={codeExamples.importStrategies} />\n              </div>\n\n              <h3>Working with Icons</h3>\n              <p>\n                Integrate Sistent's comprehensive icon library:\n              </p>\n\n              <div className=\"showcase\">\n                <div className=\"items\">\n                  <SistentThemeProvider initialMode={isDark ? \"dark\" : \"light\"}>\n                    <div style={{ display: \"flex\", gap: \"12px\", alignItems: \"center\", flexWrap: \"wrap\" }}>\n                      <Button startIcon=\"🔍\" variant=\"contained\">Search</Button>\n                      <Button endIcon=\"📥\" variant=\"outlined\">Download</Button>\n                      <Button variant=\"text\">Menu ☰</Button>\n                      <Button variant=\"contained\" color=\"secondary\">❤️</Button>\n                    </div>\n                  </SistentThemeProvider>\n                </div>\n                <CodeBlock name=\"icon-usage\" code={codeExamples.iconUsage} />\n              </div>\n\n              <h3>Responsive Design</h3>\n              <p>\n                Build responsive layouts with Sistent's grid system and breakpoint utilities:\n              </p>\n              <div className=\"showcase\">\n                <div className=\"items\">\n                  <SistentThemeProvider initialMode={isDark ? \"dark\" : \"light\"}>\n                    <div style={{ padding: \"16px\", backgroundColor: isDark ? \"#1a1a1a\" : \"#f5f5f5\", borderRadius: \"8px\" }}>\n                      <div style={{ display: \"grid\", gap: \"16px\", gridTemplateColumns: \"repeat(auto-fit, minmax(150px, 1fr))\" }}>\n                        <Card>\n                          <CardContent>\n                            <Typography variant=\"h6\" gutterBottom>\n                              Responsive Card 1\n                            </Typography>\n                            <Typography variant=\"body2\" color=\"text.secondary\">\n                              This card adapts to different screen sizes automatically.\n                            </Typography>\n                          </CardContent>\n                        </Card>\n                        <Card>\n                          <CardContent>\n                            <Typography variant=\"h6\" gutterBottom>\n                              Responsive Card 2\n                            </Typography>\n                            <Typography variant=\"body2\" color=\"text.secondary\">\n                              On mobile, cards stack vertically for better readability.\n                            </Typography>\n                          </CardContent>\n                        </Card>\n                        <Card>\n                          <CardContent>\n                            <Typography variant=\"h6\" gutterBottom>\n                              Responsive Card 3\n                            </Typography>\n                            <Typography variant=\"body2\" color=\"text.secondary\">\n                              Grid system provides flexible layouts across all devices.\n                            </Typography>\n                          </CardContent>\n                        </Card>\n                        <Card>\n                          <CardContent>\n                            <Typography variant=\"h6\" gutterBottom>\n                              Responsive Card 4\n                            </Typography>\n                            <Typography variant=\"body2\" color=\"text.secondary\">\n                            Design system ensures visual unity.\n                            </Typography>\n                          </CardContent>\n                        </Card>\n                      </div>\n                    </div>\n                  </SistentThemeProvider>\n                </div>\n                <CodeBlock name=\"responsive-usage\" code={codeExamples.responsiveUsage} />\n              </div>\n            </section>\n            {/* Best Practices Section */}\n            <h2>Best Practices</h2>\n            <section id=\"best-practices\">\n              <ul>\n                <li>\n                  <strong>Theme Provider:</strong> Always wrap your application root with <code>SistentThemeProvider</code>.\n                  Place it as high as possible in your component tree to ensure all components\n                  have access to the theme context.\n                </li>\n\n                <li>\n                  <strong>Import Optimization:</strong> Import only the components you need to keep your bundle size minimal.\n                  Use individual imports or group related components together rather than\n                  importing everything.\n                </li>\n\n                <li>\n                  <strong>Consistent Design:</strong> Use consistent component variants, colors, and sizing throughout your application.\n                  Create reusable component wrappers for commonly used patterns.\n                </li>\n\n                <li>\n                  <strong>Mobile-First:</strong> Leverage Sistent's responsive utilities and breakpoints to create mobile-first\n                  designs. Test your components across different screen sizes.\n                </li>\n\n                <li>\n                  <strong>Accessibility:</strong> Take advantage of Sistent's built-in accessibility features. Always provide\n                  proper labels, ARIA attributes, and ensure adequate color contrast.\n                </li>\n\n                <li>\n                  <strong>Theme Customization:</strong> Use design tokens and theme customization for styling rather than overriding\n                  CSS directly. This ensures consistency and easier maintenance.\n                </li>\n              </ul>\n\n              <Alert severity=\"success\" sx={{ my: 3 }}>\n                <strong>Pro Tip:</strong> Create a custom hook to manage commonly used theme values\n                and component configurations across your application.\n              </Alert>\n            </section>\n          </div>\n          <SistentPagination />\n        </Container>\n        <IntraPage contents={contents} />\n      </div>\n    </SistentWrapper>\n  );\n};\n\nexport default SistentUsage;","import React from \"react\";\nimport SistentUsage from \"../../../../../sections/Projects/Sistent/getting-started/usage\";\n\nconst SistentUsagePage = () => {\n  return <SistentUsage />;\n};\n\nexport default SistentUsagePage;\n","import React, { useEffect, useState } from \"react\";\nimport { Link } from \"gatsby\";\nimport styled from \"styled-components\";\n\nconst JoinCommunityWrapper = styled.div`\n  @media screen and (min-width: 300px) and (max-width: 1279px) {\n    display: none;\n  }\n  .intra-page {\n    position: sticky;\n    top: 10rem;\n    right: 0rem;\n    margin-right: 1rem;\n    padding-bottom: 5rem;\n    padding-right: 2rem;\n    align-items: left;\n    justify-content: space-around;\n    display: flex;\n    flex-direction: column;\n    overflow: hidden;\n\n    .list {\n      color: #000000;\n    }\n    .active {\n      font-weight: 5000;\n      color: #000000;\n    }\n\n    ul {\n      list-style: none;\n      top: 3rem;\n      li {\n        padding-bottom: 0.5rem;\n        padding-top: 0.5rem;\n      }\n    }\n    @media only screen and (min-width: 1280px) and (max-width: 1350px) {\n      padding-right: 0rem;\n      margin-right: 0rem;\n    }\n    @media only screen and (max-width: 950px) {\n      width: 0;\n      opacity: 0;\n      height: 0;\n      transition: none;\n      visibility: hidden;\n    }\n  }\n\n  .learn {\n    width: 10rem;\n  }\n`;\n\nfunction IntraPage({ contents }) {\n  const [intapath, setIntapath] = useState(null);\n  useEffect(() => {\n    const path = window.location.pathname;\n    setIntapath(path);\n  }, []);\n\n  return (\n    <JoinCommunityWrapper>\n      <div className=\"intra-page\">\n        <ul>\n          {contents.map((x) => (\n            <li key={x.id} className=\"list\">\n              <Link\n                to={`${intapath}${x.link}`}\n                key={x.id}\n                activeClassName=\"active\"\n              >\n                {x.text}\n              </Link>\n            </li>\n          ))}\n        </ul>\n      </div>\n    </JoinCommunityWrapper>\n  );\n}\n\nexport default IntraPage;\n"],"names":["CodeBlock","_ref","name","code","showCode","setShowCode","useState","React","className","type","id","onChange","prev","htmlFor","Code","codeString","language","contents","link","text","codeExamples","SistentUsage","isDark","useStyledDarkMode","SistentWrapper","TOC","Container","Alert","severity","sx","my","style","margin","SistentThemeProvider","initialMode","Button","variant","color","display","gap","flexWrap","alignItems","disabled","Card","maxWidth","mx","CardContent","Typography","component","gutterBottom","mb","flexDirection","TextField","label","fullWidth","size","multiline","rows","mt","startIcon","endIcon","padding","backgroundColor","borderRadius","gridTemplateColumns","SistentPagination","IntraPage","SistentUsagePage","JoinCommunityWrapper","styled","div","withConfig","displayName","componentId","intapath","setIntapath","useEffect","path","window","location","pathname","map","x","key","Link","to","activeClassName"],"sourceRoot":""}