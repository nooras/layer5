{"version":3,"file":"component---src-pages-projects-sistent-getting-started-tokens-index-js-a5f0c0306cce322d901b.js","mappings":"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","sources":["webpack://Layer5/./src/sections/Projects/Sistent/components/button/code-block.js","webpack://Layer5/./src/sections/Projects/Sistent/getting-started/tokens/index.js","webpack://Layer5/./src/pages/projects/sistent/getting-started/tokens/index.js","webpack://Layer5/./src/components/handbook-navigation/intra-page.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport Code from \"../../../../../components/CodeBlock\";\n\nexport const CodeBlock = ({ name, code }) => {\n  const [showCode, setShowCode] = useState(false);\n  const onChange = () => {\n    setShowCode((prev) => !prev);\n  };\n  return (\n    <div className=\"show-code\">\n      <input type=\"checkbox\" name={name} id={name} onChange={onChange} />\n      <label htmlFor={name} className=\"label\">\n        Show Code\n      </label>\n      {showCode && (\n        <Code codeString={code} language=\"javascript\" />\n      )}\n    </div>\n  );\n};\n","import React from \"react\";\nimport { Container } from \"../../../../../reusecore/Layout\";\nimport SistentWrapper from \"../../sistent.style\";\nimport TOC from \"../../../../../components/SistentNavigation\";\nimport IntraPage from \"../../../../../components/handbook-navigation/intra-page\";\nimport SistentPagination from \"../../../../../components/SistentNavigation/pagination\";\nimport { useStyledDarkMode } from \"../../../../../theme/app/useStyledDarkMode\";\nimport { CodeBlock } from \"../../components/button/code-block\";\nimport { SistentThemeProvider } from \"@sistent/sistent\";\nimport { Box, Typography, Card, Alert } from \"@sistent/sistent\";\n\nconst contents = [\n  { id: 0, link: \"#overview\", text: \"Overview\" },\n  { id: 1, link: \"#accessing-tokens\", text: \"Accessing Tokens\" },\n  { id: 2, link: \"#color-system\", text: \"Color System\" },\n  { id: 3, link: \"#typography\", text: \"Typography\" },\n  { id: 4, link: \"#spacing\", text: \"Spacing\" },\n  { id: 5, link: \"#examples\", text: \"Examples\" }\n];\n\nconst codeExamples = {\n  basicAccess: `import { useTheme } from \"@sistent/sistent\";\n\nfunction MyComponent() {\n  const theme = useTheme();\n  \n  return (\n    <div style={{\n      backgroundColor: theme.palette.primary.main,\n      color: theme.palette.primary.contrastText,\n      padding: theme.spacing(2)\n    }}>\n      Using Sistent design tokens\n    </div>\n  );\n}`,\n\n  colors: `// Primary brand colors\ntheme.palette.primary.main      // Layer5 Green\ntheme.palette.secondary.main    // Layer5 Orange\n\n// Semantic colors\ntheme.palette.error.main        // Error red\ntheme.palette.success.main      // Success green\ntheme.palette.warning.main      // Warning orange\ntheme.palette.info.main         // Info blue\n\n// Background and text\ntheme.palette.background.default\ntheme.palette.text.primary`,\n\n  typography: `// Typography scale\ntheme.typography.h1             // Large headings\ntheme.typography.h6             // Small headings\ntheme.typography.body1          // Primary body text\ntheme.typography.body2          // Secondary body text\n\n// Font properties\ntheme.typography.fontFamily     // Primary font\ntheme.typography.fontWeightBold // Font weights`,\n\n  spacing: `// 8px-based spacing system\ntheme.spacing(1)    // 8px\ntheme.spacing(2)    // 16px\ntheme.spacing(3)    // 24px\ntheme.spacing(4)    // 32px\n\n// Usage in components\n<Box sx={{ p: 2, mb: 3 }}>\n  {/* padding: 16px, margin-bottom: 24px */}\n</Box>`,\n\n  practicalExample: `import { styled, Card, Typography } from \"@sistent/sistent\";\n\nconst ProductCard = styled(Card)(({ theme }) => ({\n  // Background and borders using color tokens\n  backgroundColor: theme.palette.background.paper,\n  border: \\`1px solid \\${theme.palette.divider}\\`,\n  borderRadius: theme.shape.borderRadius,\n  \n  // Consistent spacing using spacing tokens\n  padding: theme.spacing(3),\n  marginBottom: theme.spacing(2),\n  \n  // Typography tokens for text hierarchy\n  '& .product-title': {\n    ...theme.typography.h5,\n    color: theme.palette.text.primary,\n    marginBottom: theme.spacing(1),\n    fontWeight: theme.typography.fontWeightMedium,\n  },\n  \n  '& .product-description': {\n    ...theme.typography.body1,\n    color: theme.palette.text.secondary,\n    marginBottom: theme.spacing(2),\n    lineHeight: 1.6,\n  },\n  \n  '& .product-price': {\n    ...theme.typography.h6,\n    color: theme.palette.primary.main,\n    fontWeight: theme.typography.fontWeightBold,\n  },\n  \n  // Interactive states with color tokens\n  '&:hover': {\n    backgroundColor: theme.palette.action.hover,\n    transform: 'translateY(-2px)',\n    transition: 'all 0.2s ease-in-out',\n  },\n  \n  // Responsive spacing\n  [theme.breakpoints.up('md')]: {\n    padding: theme.spacing(4),\n  },\n}));\n\n// Usage example\nfunction ProductShowcase({ products }) {\n  return (\n    <div style={{ gap: theme.spacing(2) }}>\n      {products.map(product => (\n        <ProductCard key={product.id}>\n          <div className=\"product-title\">{product.name}</div>\n          <div className=\"product-description\">{product.description}</div>\n          <div className=\"product-price\">\\`$\\`{product.price}</div>\n        </ProductCard>\n      ))}\n    </div>\n  );\n}`\n};\n\nconst SistentTokens = () => {\n  const { isDark } = useStyledDarkMode();\n\n  return (\n    <SistentWrapper>\n      <div className=\"page-header-section\">\n        <h1>Design Tokens</h1>\n      </div>\n      <TOC />\n\n      <div className=\"page-section\">\n        <Container>\n          <div className=\"content\">\n\n            <a id=\"overview\">\n              <h2>Overview</h2>\n            </a>\n            <p>\n              Design tokens are the foundation of Sistent's design system. They are named values that store\n              visual design attributes like colors, spacing, and typography scales. Instead of hardcoding\n              values like <code>#00B39F</code> or <code>16px</code>, you reference semantic tokens that\n              automatically adapt to different themes and contexts.\n            </p>\n\n            <SistentThemeProvider initialMode={isDark ? \"dark\" : \"light\"}>\n              <Alert severity=\"info\" sx={{ my: 2 }}>\n                <strong>Why tokens matter:</strong> They ensure visual consistency across Layer5 projects,\n                enable automatic theming (light/dark mode), and make maintenance significantly easier.\n              </Alert>\n            </SistentThemeProvider>\n\n            <a id=\"accessing-tokens\">\n              <h2>Accessing Tokens</h2>\n            </a>\n            <p>\n              All design tokens are available through the theme object using the <code>useTheme</code> hook:\n            </p>\n\n            <div className=\"showcase\">\n              <CodeBlock name=\"basic-access\" code={codeExamples.basicAccess} />\n            </div>\n\n            <a id=\"color-system\">\n              <h2>Color System</h2>\n            </a>\n            <p>\n              Sistent uses Layer5's brand colors as the foundation, with additional semantic colors\n              for UI states.\n            </p>\n\n            <div className=\"showcase\">\n              <div className=\"items\">\n                <SistentThemeProvider initialMode={isDark ? \"dark\" : \"light\"}>\n                  <Box display=\"grid\" gridTemplateColumns=\"repeat(auto-fit, minmax(120px, 1fr))\" gap={1} mb={2}>\n                    <Box sx={{\n                      bgcolor: \"primary.main\",\n                      color: \"primary.contrastText\",\n                      p: 1,\n                      textAlign: \"center\",\n                      fontSize: \"12px\",\n                      fontWeight: \"bold\"\n                    }}>\n                      Primary\n                    </Box>\n                    <Box sx={{\n                      bgcolor: \"secondary.main\",\n                      color: \"secondary.contrastText\",\n                      p: 1,\n                      textAlign: \"center\",\n                      fontSize: \"12px\",\n                      fontWeight: \"bold\"\n                    }}>\n                      Secondary\n                    </Box>\n                    <Box sx={{\n                      bgcolor: \"error.main\",\n                      color: \"error.contrastText\",\n                      p: 1,\n                      textAlign: \"center\",\n                      fontSize: \"12px\",\n                      fontWeight: \"bold\"\n                    }}>\n                      Error\n                    </Box>\n                    <Box sx={{\n                      bgcolor: \"success.main\",\n                      color: \"success.contrastText\",\n                      p: 1,\n                      textAlign: \"center\",\n                      fontSize: \"12px\",\n                      fontWeight: \"bold\"\n                    }}>\n                      Success\n                    </Box>\n                  </Box>\n                </SistentThemeProvider>\n              </div>\n              <CodeBlock name=\"colors\" code={codeExamples.colors} />\n            </div>\n\n            <a id=\"typography\">\n              <h2>Typography</h2>\n            </a>\n            <p>\n              Typography tokens provide consistent text styling across all components.\n            </p>\n\n            <div className=\"showcase\">\n              <div className=\"items\">\n                <SistentThemeProvider initialMode={isDark ? \"dark\" : \"light\"}>\n                  <Box>\n                    <Typography variant=\"h1\" gutterBottom>Heading 1</Typography>\n                    <Typography variant=\"h3\" gutterBottom>Heading 3</Typography>\n                    <Typography variant=\"h6\" gutterBottom>Heading 6</Typography>\n                    <Typography variant=\"body1\" gutterBottom>Body text primary</Typography>\n                    <Typography variant=\"body2\">Body text secondary</Typography>\n                  </Box>\n                </SistentThemeProvider>\n              </div>\n              <CodeBlock name=\"Typography\" code={codeExamples.typography} />\n            </div>\n\n            <a id=\"spacing\">\n              <h2>Spacing</h2>\n            </a>\n            <p>\n              Sistent uses an 8px-based spacing system. All spacing values are multiples of 8px\n              for consistent layouts.\n            </p>\n\n            <div className=\"showcase\">\n              <div className=\"items\">\n                <SistentThemeProvider initialMode={isDark ? \"dark\" : \"light\"}>\n                  <Box>\n                    {[1, 2, 3, 4, 6, 8].map((multiplier) => (\n                      <Box key={multiplier} display=\"flex\" alignItems=\"center\" gap={2} mb={1}>\n                        <Typography variant=\"body2\" sx={{ minWidth: 80, fontFamily: \"monospace\" }}>\n                          spacing({multiplier})\n                        </Typography>\n                        <Box\n                          sx={{\n                            width: `${multiplier * 8}px`,\n                            height: 20,\n                            backgroundColor: \"primary.main\",\n                            border: \"1px solid\",\n                            borderColor: \"divider\"\n                          }}\n                        />\n                        <Typography variant=\"body2\" sx={{ fontFamily: \"monospace\", fontSize: \"12px\", color: \"text.secondary\" }}>\n                          {multiplier * 8}px\n                        </Typography>\n                      </Box>\n                    ))}\n                  </Box>\n                </SistentThemeProvider>\n              </div>\n              <CodeBlock name=\"Spacing\" code={codeExamples.spacing} />\n            </div>\n\n            <a id=\"examples\">\n              <h2>Practical Examples</h2>\n            </a>\n            <p>\n              Here's how to use multiple token categories together in real components:\n            </p>\n\n            <div className=\"showcase\">\n              <div className=\"items\">\n                <SistentThemeProvider initialMode={isDark ? \"dark\" : \"light\"}>\n                  <Card sx={{\n                    p: 3,\n                    mb: 2,\n                    border: \"1px solid\",\n                    borderColor: \"divider\",\n                    \"&:hover\": {\n                      bgcolor: \"action.hover\",\n                      transform: \"translateY(-2px)\",\n                      transition: \"all 0.2s ease-in-out\"\n                    }\n                  }}>\n                    <Typography variant=\"h5\" color=\"text.primary\" gutterBottom fontWeight=\"medium\">\n                      Product Card\n                    </Typography>\n                    <Typography variant=\"body1\" color=\"text.secondary\" sx={{ mb: 2, lineHeight: 1.6 }}>\n                      A beautifully designed card component using Sistent design tokens for consistent styling and theming.\n                    </Typography>\n                    <Typography variant=\"h6\" color=\"primary.main\" fontWeight=\"bold\">\n                      $99.99\n                    </Typography>\n                  </Card>\n                </SistentThemeProvider>\n              </div>\n              <CodeBlock name=\"practical-example\" code={codeExamples.practicalExample} />\n            </div>\n\n            <h3>Implementation Guidelines</h3>\n            <br/>\n            <ul>\n              <li>Always use tokens instead of hardcoded values for maintainable code</li>\n              <li>Tokens automatically adapt to light/dark themes without additional configuration</li>\n              <li>Use <code>useTheme()</code> hook to access all available design tokens</li>\n              <li>Prefer semantic color names (primary, error) over specific hex values</li>\n              <li>Follow the 8px spacing grid system for consistent visual rhythm</li>\n              <li>Test components in both light and dark themes to ensure proper contrast</li>\n            </ul>\n\n          </div>\n          <SistentPagination />\n        </Container>\n        <IntraPage contents={contents} />\n      </div>\n    </SistentWrapper>\n  );\n};\n\nexport default SistentTokens;","import React from \"react\";\nimport SistentTokens from \"../../../../../sections/Projects/Sistent/getting-started/tokens\";\n\nconst SistentTokensPage = () => {\n  return <SistentTokens />;\n};\n\nexport default SistentTokensPage;\n","import React, { useEffect, useState } from \"react\";\nimport { Link } from \"gatsby\";\nimport styled from \"styled-components\";\n\nconst JoinCommunityWrapper = styled.div`\n  @media screen and (min-width: 300px) and (max-width: 1279px) {\n    display: none;\n  }\n  .intra-page {\n    position: sticky;\n    top: 10rem;\n    right: 0rem;\n    margin-right: 1rem;\n    padding-bottom: 5rem;\n    padding-right: 2rem;\n    align-items: left;\n    justify-content: space-around;\n    display: flex;\n    flex-direction: column;\n    overflow: hidden;\n\n    .list {\n      color: #000000;\n    }\n    .active {\n      font-weight: 5000;\n      color: #000000;\n    }\n\n    ul {\n      list-style: none;\n      top: 3rem;\n      li {\n        padding-bottom: 0.5rem;\n        padding-top: 0.5rem;\n      }\n    }\n    @media only screen and (min-width: 1280px) and (max-width: 1350px) {\n      padding-right: 0rem;\n      margin-right: 0rem;\n    }\n    @media only screen and (max-width: 950px) {\n      width: 0;\n      opacity: 0;\n      height: 0;\n      transition: none;\n      visibility: hidden;\n    }\n  }\n\n  .learn {\n    width: 10rem;\n  }\n`;\n\nfunction IntraPage({ contents }) {\n  const [intapath, setIntapath] = useState(null);\n  useEffect(() => {\n    const path = window.location.pathname;\n    setIntapath(path);\n  }, []);\n\n  return (\n    <JoinCommunityWrapper>\n      <div className=\"intra-page\">\n        <ul>\n          {contents.map((x) => (\n            <li key={x.id} className=\"list\">\n              <Link\n                to={`${intapath}${x.link}`}\n                key={x.id}\n                activeClassName=\"active\"\n              >\n                {x.text}\n              </Link>\n            </li>\n          ))}\n        </ul>\n      </div>\n    </JoinCommunityWrapper>\n  );\n}\n\nexport default IntraPage;\n"],"names":["CodeBlock","_ref","name","code","showCode","setShowCode","useState","React","className","type","id","onChange","prev","htmlFor","Code","codeString","language","contents","link","text","codeExamples","SistentTokens","isDark","useStyledDarkMode","SistentWrapper","TOC","Container","SistentThemeProvider","initialMode","Alert","severity","sx","my","Box","display","gridTemplateColumns","gap","mb","bgcolor","color","p","textAlign","fontSize","fontWeight","Typography","variant","gutterBottom","map","multiplier","key","alignItems","minWidth","fontFamily","width","height","backgroundColor","border","borderColor","Card","transform","transition","lineHeight","SistentPagination","IntraPage","SistentTokensPage","JoinCommunityWrapper","styled","div","withConfig","displayName","componentId","intapath","setIntapath","useEffect","path","window","location","pathname","x","Link","to","activeClassName"],"sourceRoot":""}