<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Layer5 Resources]]></title><description><![CDATA[Expect more from your infrastructure. Cloud native, open source software for your cloud native infrastructure and applications. Allowing developers to focus on business logic, not infrastructure concerns. Empowering operators to confidently run modern infrastructure.]]></description><link>https://layer5.io</link><generator>GatsbyJS</generator><lastBuildDate>Sun, 19 Oct 2025 02:04:25 GMT</lastBuildDate><item><title><![CDATA[Layer5 Academy vs Moocit]]></title><description><![CDATA[var _excluded = ["components"];
function _extends() { return _extends = Object.assign ? Object.assign.bind() : function (n) { for (var e = 1; e < arguments.length; e++) { var t = arguments[e]; for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]); } return n; }, _extends.apply(null, arguments); }
function _objectWithoutProperties(e, t) { if (null == e) return {}; var o, r, i = _objectWithoutPropertiesLoose(e, t); if (Object.getOwnPropertySymbols) { var n = Object.getOwnPropertySymbols(e); for (r = 0; r < n.length; r++) o = n[r], -1 === t.indexOf(o) && {}.propertyIsEnumerable.call(e, o) && (i[o] = e[o]); } return i; }
function _objectWithoutPropertiesLoose(r, e) { if (null == r) return {}; var t = {}; for (var n in r) if ({}.hasOwnProperty.call(r, n)) { if (-1 !== e.indexOf(n)) continue; t[n] = r[n]; } return t; }
/* @jsxRuntime classic */
/* @jsx mdx */

var _frontmatter = {
  "title": "Layer5 Academy vs Moocit",
  "subtitle": "Academy Comparison",
  "date": "2025-08-18 08:00:00 -0530",
  "thumbnail": "./academy.svg",
  "darkthumbnail": "./academy.svg",
  "description": "Layer5 Academy vs Moocit Comaprision",
  "type": "Comparison",
  "category": "Academy",
  "tags": ["Academy", "Moocit"],
  "featured": false,
  "published": true,
  "resource": true
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = "wrapper";
return function MDXContent(_ref) {
  var components = _ref.components,
    props = _objectWithoutProperties(_ref, _excluded);
  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: "MDXLayout"
  }), mdx(ResourcesWrapper, {
    mdxType: "ResourcesWrapper"
  }, mdx("div", {
    className: "comparison"
  }, mdx("p", null, "The ", mdx("a", {
    parentName: "p",
    "href": "https://cloud.layer5.io/academy"
  }, "Layer5 Academy"), " provides a structured platform for cloud native learning, combining core educational content with practical, hands-on experiences. Learners can enroll in guided paths, complete interactive labs, and take assessments that reinforce understanding at every stage."), mdx("p", null, "The Academy supports progression through quizzes, tests, and certification exams, offering grades, retake options, and recognition through badges and certificates. For organizations, administrators can monitor learner performance, create new content, and send customized communications, ensuring both individual growth and collective visibility."), mdx("h2", null, "Detailed Comparison"), mdx("p", null, "The following details highlight the key differences between Layer5 Academy and Moocit across various dimensions. Be sure to read the ", mdx("a", {
    parentName: "p",
    "href": "https://docs.layer5.io/cloud/academy"
  }, "Layer5 Academy documentation"), " for more in-depth information."), mdx("h3", null, "Course Creation & Management"), mdx("p", null, "It is the backbone of the platform, enabling instructors to easily design, structure, and deliver courses. This includes tools for creating multimedia lessons, managing modules, setting prerequisites, and organizing assessments to ensure a seamless teaching process."), mdx("table", null, mdx("thead", {
    parentName: "table"
  }, mdx("tr", {
    parentName: "thead"
  }, mdx("th", {
    parentName: "tr",
    "align": null
  }, "Feature"), mdx("th", {
    parentName: "tr",
    "align": null
  }, "Moocit"), mdx("th", {
    parentName: "tr",
    "align": null
  }, "Layer5"), mdx("th", {
    parentName: "tr",
    "align": null
  }, "Notes"))), mdx("tbody", {
    parentName: "table"
  }, mdx("tr", {
    parentName: "tbody"
  }, mdx("td", {
    parentName: "tr",
    "align": null
  }, "Content Variety"), mdx("td", {
    parentName: "tr",
    "align": null
  }, "\u2705"), mdx("td", {
    parentName: "tr",
    "align": null
  }, "\u2705"), mdx("td", {
    parentName: "tr",
    "align": null
  }, "Both: Support text, images, videos, PDFs")), mdx("tr", {
    parentName: "tbody"
  }, mdx("td", {
    parentName: "tr",
    "align": null
  }, "Interactive Learning"), mdx("td", {
    parentName: "tr",
    "align": null
  }, "\u2705"), mdx("td", {
    parentName: "tr",
    "align": null
  }, "\u2705"), mdx("td", {
    parentName: "tr",
    "align": null
  }, "Both: Quizzes, tests, self-assessment")), mdx("tr", {
    parentName: "tbody"
  }, mdx("td", {
    parentName: "tr",
    "align": null
  }, "Learning Paths/Tracks"), mdx("td", {
    parentName: "tr",
    "align": null
  }, "\u2705"), mdx("td", {
    parentName: "tr",
    "align": null
  }, "\u2705"), mdx("td", {
    parentName: "tr",
    "align": null
  }, "Both: Support sequential paths and prerequisites")), mdx("tr", {
    parentName: "tbody"
  }, mdx("td", {
    parentName: "tr",
    "align": null
  }, "Course Publishing"), mdx("td", {
    parentName: "tr",
    "align": null
  }, "\u2705"), mdx("td", {
    parentName: "tr",
    "align": null
  }, "\u2705"), mdx("td", {
    parentName: "tr",
    "align": null
  }, "Moocit: Web-based approach to content creation and publishing with incremental instant and scheduled releases. Layer5: Gitflow based approach to content creation and publishing is gitflow based with version-controlled publishing.")), mdx("tr", {
    parentName: "tbody"
  }, mdx("td", {
    parentName: "tr",
    "align": null
  }, "Course Management"), mdx("td", {
    parentName: "tr",
    "align": null
  }, "\u2705"), mdx("td", {
    parentName: "tr",
    "align": null
  }, "\u2705"), mdx("td", {
    parentName: "tr",
    "align": null
  }, "Both: Tools to organize, assign, and manage")), mdx("tr", {
    parentName: "tbody"
  }, mdx("td", {
    parentName: "tr",
    "align": null
  }, "Course Tracking"), mdx("td", {
    parentName: "tr",
    "align": null
  }, "\u2705"), mdx("td", {
    parentName: "tr",
    "align": null
  }, "\u2705"), mdx("td", {
    parentName: "tr",
    "align": null
  }, "Both: Track learner progress and completion")), mdx("tr", {
    parentName: "tbody"
  }, mdx("td", {
    parentName: "tr",
    "align": null
  }, "Course Authoring"), mdx("td", {
    parentName: "tr",
    "align": null
  }, "\u26A0\uFE0F"), mdx("td", {
    parentName: "tr",
    "align": null
  }, "\u2705"), mdx("td", {
    parentName: "tr",
    "align": null
  }, "Moocit: uses the Open edX platform with XML-based authoring. Layer5: uses a modern Hugo static site generator with Markdown-based authoring.")), mdx("tr", {
    parentName: "tbody"
  }, mdx("td", {
    parentName: "tr",
    "align": null
  }, "Public Catalog"), mdx("td", {
    parentName: "tr",
    "align": null
  }, "\u274C"), mdx("td", {
    parentName: "tr",
    "align": null
  }, "\u2705"), mdx("td", {
    parentName: "tr",
    "align": null
  }, "Moocit: Lacks browsable, public catalog. Layer5: Provides comprehensive discoverability with browsable, public catalog.")))), mdx("h3", null, "Learner Experience"), mdx("p", null, "Learner experience emphasizes intuitive design, collaboration, and flexibility. Both platforms enable personalized learning, progress tracking, and interactive engagement, with Layer5 extending into real-time collaboration via ", mdx("a", {
    parentName: "p",
    "href": "/cloud-native-management/kanvas"
  }, "Kanvas"), "."), mdx("table", null, mdx("thead", {
    parentName: "table"
  }, mdx("tr", {
    parentName: "thead"
  }, mdx("th", {
    parentName: "tr",
    "align": null
  }, "Feature"), mdx("th", {
    parentName: "tr",
    "align": null
  }, "Moocit"), mdx("th", {
    parentName: "tr",
    "align": null
  }, "Layer5"), mdx("th", {
    parentName: "tr",
    "align": null
  }, "Notes"))), mdx("tbody", {
    parentName: "table"
  }, mdx("tr", {
    parentName: "tbody"
  }, mdx("td", {
    parentName: "tr",
    "align": null
  }, "Learner Portal"), mdx("td", {
    parentName: "tr",
    "align": null
  }, "\u2705"), mdx("td", {
    parentName: "tr",
    "align": null
  }, "\u2705"), mdx("td", {
    parentName: "tr",
    "align": null
  })), mdx("tr", {
    parentName: "tbody"
  }, mdx("td", {
    parentName: "tr",
    "align": null
  }, "Self-paced Learning"), mdx("td", {
    parentName: "tr",
    "align": null
  }, "\u2705"), mdx("td", {
    parentName: "tr",
    "align": null
  }, "\u2705"), mdx("td", {
    parentName: "tr",
    "align": null
  })), mdx("tr", {
    parentName: "tbody"
  }, mdx("td", {
    parentName: "tr",
    "align": null
  }, "Instructor-led Learning"), mdx("td", {
    parentName: "tr",
    "align": null
  }, "\u2705"), mdx("td", {
    parentName: "tr",
    "align": null
  }, "\u2705"), mdx("td", {
    parentName: "tr",
    "align": null
  })), mdx("tr", {
    parentName: "tbody"
  }, mdx("td", {
    parentName: "tr",
    "align": null
  }, "Mobile Learning"), mdx("td", {
    parentName: "tr",
    "align": null
  }, "\u2705"), mdx("td", {
    parentName: "tr",
    "align": null
  }, "\u2705"), mdx("td", {
    parentName: "tr",
    "align": null
  })), mdx("tr", {
    parentName: "tbody"
  }, mdx("td", {
    parentName: "tr",
    "align": null
  }, "Certificate Generation"), mdx("td", {
    parentName: "tr",
    "align": null
  }, "\u2705"), mdx("td", {
    parentName: "tr",
    "align": null
  }, "\u2705"), mdx("td", {
    parentName: "tr",
    "align": null
  }, "Both: Shareable certifications")), mdx("tr", {
    parentName: "tbody"
  }, mdx("td", {
    parentName: "tr",
    "align": null
  }, "Social Learning"), mdx("td", {
    parentName: "tr",
    "align": null
  }, "\u2705"), mdx("td", {
    parentName: "tr",
    "align": null
  }, "\u2705"), mdx("td", {
    parentName: "tr",
    "align": null
  }, "Both: Forums, discussions. Layer5: Kanvas and Slack.")), mdx("tr", {
    parentName: "tbody"
  }, mdx("td", {
    parentName: "tr",
    "align": null
  }, "Learner Profile"), mdx("td", {
    parentName: "tr",
    "align": null
  }, "\u26A0\uFE0F"), mdx("td", {
    parentName: "tr",
    "align": null
  }, "\u2705"), mdx("td", {
    parentName: "tr",
    "align": null
  }, "Moocit: Limited support for interactive profiles. Layer5: Comprehensive learner profiles with progress tracking and social features.")), mdx("tr", {
    parentName: "tbody"
  }, mdx("td", {
    parentName: "tr",
    "align": null
  }, "Group / Synchronous Learning"), mdx("td", {
    parentName: "tr",
    "align": null
  }, "\u274C"), mdx("td", {
    parentName: "tr",
    "align": null
  }, "\u2705"), mdx("td", {
    parentName: "tr",
    "align": null
  }, "Layer5: Real-time, collaborative learning.")), mdx("tr", {
    parentName: "tbody"
  }, mdx("td", {
    parentName: "tr",
    "align": null
  }, "Hands-on Labs"), mdx("td", {
    parentName: "tr",
    "align": null
  }, "\u274C"), mdx("td", {
    parentName: "tr",
    "align": null
  }, "\u2705"), mdx("td", {
    parentName: "tr",
    "align": null
  }, "Layer5:  through Kanvas")))), mdx("h3", null, "Administration & Analytics"), mdx("p", null, "Both platforms deliver robust administration capabilities with user management, analytics, and compliance tools. Layer5 extends customization through its cloud-native ecosystem integration."), mdx("table", null, mdx("thead", {
    parentName: "table"
  }, mdx("tr", {
    parentName: "thead"
  }, mdx("th", {
    parentName: "tr",
    "align": null
  }, "Feature"), mdx("th", {
    parentName: "tr",
    "align": null
  }, "Moocit"), mdx("th", {
    parentName: "tr",
    "align": null
  }, "Layer5"), mdx("th", {
    parentName: "tr",
    "align": null
  }, "Notes"))), mdx("tbody", {
    parentName: "table"
  }, mdx("tr", {
    parentName: "tbody"
  }, mdx("td", {
    parentName: "tr",
    "align": null
  }, "Assessment Management"), mdx("td", {
    parentName: "tr",
    "align": null
  }, "\u2705"), mdx("td", {
    parentName: "tr",
    "align": null
  }, "\u2705"), mdx("td", {
    parentName: "tr",
    "align": null
  }, "Both: Build and evaluate assessments.")), mdx("tr", {
    parentName: "tbody"
  }, mdx("td", {
    parentName: "tr",
    "align": null
  }, "Gradebook"), mdx("td", {
    parentName: "tr",
    "align": null
  }, "\u2705"), mdx("td", {
    parentName: "tr",
    "align": null
  }, "\u2705"), mdx("td", {
    parentName: "tr",
    "align": null
  }, "Both: Track grades and scores.")), mdx("tr", {
    parentName: "tbody"
  }, mdx("td", {
    parentName: "tr",
    "align": null
  }, "Reporting & Statistics"), mdx("td", {
    parentName: "tr",
    "align": null
  }, "\u2705"), mdx("td", {
    parentName: "tr",
    "align": null
  }, "\u2705"), mdx("td", {
    parentName: "tr",
    "align": null
  }, "Both: Insights into learner engagement and performance.")), mdx("tr", {
    parentName: "tbody"
  }, mdx("td", {
    parentName: "tr",
    "align": null
  }, "User Management"), mdx("td", {
    parentName: "tr",
    "align": null
  }, "\u26A0\uFE0F"), mdx("td", {
    parentName: "tr",
    "align": null
  }, "\u2705"), mdx("td", {
    parentName: "tr",
    "align": null
  }, "Moocit: Manage user accounts. Layer5: Manage user accounts with granular and customizable permissions and roles.")), mdx("tr", {
    parentName: "tbody"
  }, mdx("td", {
    parentName: "tr",
    "align": null
  }, "Group Creation and Management"), mdx("td", {
    parentName: "tr",
    "align": null
  }, "\u2705"), mdx("td", {
    parentName: "tr",
    "align": null
  }, "\u2705"), mdx("td", {
    parentName: "tr",
    "align": null
  }, "Both: Allow instructors to organize students and content into different groups.")), mdx("tr", {
    parentName: "tbody"
  }, mdx("td", {
    parentName: "tr",
    "align": null
  }, "Single Sign-On (SSO)"), mdx("td", {
    parentName: "tr",
    "align": null
  }, "\u274C"), mdx("td", {
    parentName: "tr",
    "align": null
  }, "\u2705"), mdx("td", {
    parentName: "tr",
    "align": null
  }, "Layer5: Enhanced identity and granular access control.")), mdx("tr", {
    parentName: "tbody"
  }, mdx("td", {
    parentName: "tr",
    "align": null
  }, "Branded Academy Invitations"), mdx("td", {
    parentName: "tr",
    "align": null
  }, "\u274C"), mdx("td", {
    parentName: "tr",
    "align": null
  }, "\u2705"), mdx("td", {
    parentName: "tr",
    "align": null
  }, "Layer5: Approval queues, domain-based allowances.")), mdx("tr", {
    parentName: "tbody"
  }, mdx("td", {
    parentName: "tr",
    "align": null
  }, "Branded Content Announcements"), mdx("td", {
    parentName: "tr",
    "align": null
  }, "\u274C"), mdx("td", {
    parentName: "tr",
    "align": null
  }, "\u2705"), mdx("td", {
    parentName: "tr",
    "align": null
  }, "Layer5: New content announcements")), mdx("tr", {
    parentName: "tbody"
  }, mdx("td", {
    parentName: "tr",
    "align": null
  }, "Public Clouds"), mdx("td", {
    parentName: "tr",
    "align": null
  }, "\u274C"), mdx("td", {
    parentName: "tr",
    "align": null
  }, "\u2705"), mdx("td", {
    parentName: "tr",
    "align": null
  }, "Layer5: AWS, Azure, GCP, DigitalOcean, and an Kubernetes service")), mdx("tr", {
    parentName: "tbody"
  }, mdx("td", {
    parentName: "tr",
    "align": null
  }, "Orchestration Support"), mdx("td", {
    parentName: "tr",
    "align": null
  }, "\u274C"), mdx("td", {
    parentName: "tr",
    "align": null
  }, "\u2705"), mdx("td", {
    parentName: "tr",
    "align": null
  }, "Layer5: Hundreds of CNCF ecosystem integrations")))), mdx("h3", null, "Additional Features"), mdx("p", null, "Extra functionalities make the platforms more engaging. While both cover gamification and eCommerce, Layer5 distinguishes itself with advanced white-labeling and community-driven Slack support."), mdx("table", null, mdx("thead", {
    parentName: "table"
  }, mdx("tr", {
    parentName: "thead"
  }, mdx("th", {
    parentName: "tr",
    "align": null
  }, "Feature"), mdx("th", {
    parentName: "tr",
    "align": null
  }, "Moocit"), mdx("th", {
    parentName: "tr",
    "align": null
  }, "Layer5"), mdx("th", {
    parentName: "tr",
    "align": null
  }, "Notes"))), mdx("tbody", {
    parentName: "table"
  }, mdx("tr", {
    parentName: "tbody"
  }, mdx("td", {
    parentName: "tr",
    "align": null
  }, "Gamification"), mdx("td", {
    parentName: "tr",
    "align": null
  }, "\u2705"), mdx("td", {
    parentName: "tr",
    "align": null
  }, "\u2705"), mdx("td", {
    parentName: "tr",
    "align": null
  }, "Layer5: badges and learning leaderboards.")), mdx("tr", {
    parentName: "tbody"
  }, mdx("td", {
    parentName: "tr",
    "align": null
  }, "eCommerce Management"), mdx("td", {
    parentName: "tr",
    "align": null
  }, "\u2705"), mdx("td", {
    parentName: "tr",
    "align": null
  }, "\u2705"), mdx("td", {
    parentName: "tr",
    "align": null
  }, "Both: Support Stripe as a built-in integration.")), mdx("tr", {
    parentName: "tbody"
  }, mdx("td", {
    parentName: "tr",
    "align": null
  }, "White-labeling"), mdx("td", {
    parentName: "tr",
    "align": null
  }, "\u2705"), mdx("td", {
    parentName: "tr",
    "align": null
  }, "\u2705"), mdx("td", {
    parentName: "tr",
    "align": null
  }, "Layer5: Superior branding flexibility.")), mdx("tr", {
    parentName: "tbody"
  }, mdx("td", {
    parentName: "tr",
    "align": null
  }, "Chatbot Support"), mdx("td", {
    parentName: "tr",
    "align": null
  }, "\u26A0\uFE0F"), mdx("td", {
    parentName: "tr",
    "align": null
  }, "\u2705"), mdx("td", {
    parentName: "tr",
    "align": null
  }, "Moocit: website chat. Layer5: community-centric Slack.")), mdx("tr", {
    parentName: "tbody"
  }, mdx("td", {
    parentName: "tr",
    "align": null
  }, "Cloud Native Focused"), mdx("td", {
    parentName: "tr",
    "align": null
  }, "\u274C"), mdx("td", {
    parentName: "tr",
    "align": null
  }, "\u2705"), mdx("td", {
    parentName: "tr",
    "align": null
  }, "Layer5 is a cloud native ecosystem stalwart, tightly aligned with the CNCF.")))), mdx("h2", null, "Summary"), mdx("p", null, "While Moocit lacks content attribution and seamless orchestration with hands-on labs, Layer5 Academy stands out by enabling true learning through interactive, hands-on labs powered by Kanvas\u2014where real learning happens. Layer5 Academy's labs drive students to utilize third-party public cloud providers' infrastructure, meaning more time spent on hands-on activities can increase costs for users paying for their chosen provider's resources. However, public cloud providers featuring Academy content and labs can incentivize adoption by offering credits and discount codes, presented to learners after enrolling in a Challenge, Learning Path, or Certification. Furthermore, Layer5 enhances administrative efficiency with support for bulk invitations for new learners and email announcements for new academy content, underscoring its superior strengths in content creation, learner experience, and administrative capabilities compared to Moocit."))));
}
;
MDXContent.isMDXComponent = true;]]></description><link>https://layer5.io/resources/academy/layer5-academy-vs-moocit</link><guid isPermaLink="false">https://layer5.io/resources/academy/layer5-academy-vs-moocit</guid><pubDate>Mon, 18 Aug 2025 00:00:00 GMT</pubDate><enclosure url="https://layer5.io/static/c78e99b249ac1d7cd5251ac9aea491f6/academy.svg" length="0" type="image/svg+xml"/><content:encoded></content:encoded></item><item><title><![CDATA[HPE's Adoption of Layer5 Meshery and Kanvas]]></title><description><![CDATA[var _excluded = ["components"];
function _extends() { return _extends = Object.assign ? Object.assign.bind() : function (n) { for (var e = 1; e < arguments.length; e++) { var t = arguments[e]; for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]); } return n; }, _extends.apply(null, arguments); }
function _objectWithoutProperties(e, t) { if (null == e) return {}; var o, r, i = _objectWithoutPropertiesLoose(e, t); if (Object.getOwnPropertySymbols) { var n = Object.getOwnPropertySymbols(e); for (r = 0; r < n.length; r++) o = n[r], -1 === t.indexOf(o) && {}.propertyIsEnumerable.call(e, o) && (i[o] = e[o]); } return i; }
function _objectWithoutPropertiesLoose(r, e) { if (null == r) return {}; var t = {}; for (var n in r) if ({}.hasOwnProperty.call(r, n)) { if (-1 !== e.indexOf(n)) continue; t[n] = r[n]; } return t; }
/* @jsxRuntime classic */
/* @jsx mdx */

var _frontmatter = {
  "title": "HPE's Adoption of Layer5 Meshery and Kanvas",
  "subtitle": "HPE uses Meshery to manage SPIRE instances",
  "permalink": "case-study/hpes-adoption-of-meshery-and-kanvas",
  "date": "2023-06-17 08:00:00 -0530",
  "author": "Layer5 Team",
  "thumbnail": "./meshery-and-hpe.svg",
  "darkthumbnail": "./meshery-and-hpe.svg",
  "description": "HPE uses Meshery to manage SPIRE instances",
  "type": "Case Study",
  "category": "Case Study",
  "tags": ["Cloud Native, Meshery"],
  "featured": false,
  "published": true,
  "resource": true,
  "redirect_from": ["/resources/case-study/hpes-adoption-of-meshery-and-meshmap"]
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = "wrapper";
return function MDXContent(_ref) {
  var components = _ref.components,
    props = _objectWithoutProperties(_ref, _excluded);
  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: "MDXLayout"
  }), mdx(ResourcesWrapper, {
    mdxType: "ResourcesWrapper"
  }, mdx(HPEintro, {
    mdxType: "HPEintro"
  }, "HPE's adoption of Meshery was driven by the need to simplify Kubernetes cluster management and monitoring. Meshery is an open source cloud native management tool that provides a self-service platform for designing, visualizing, deploying, testing, and operating cloud native infrastructure."), mdx("div", {
    style: {
      display: "flex",
      justifyContent: "center",
      padding: "2%"
    }
  }, mdx(Button, {
    $secondary: true,
    title: "Download Case Study",
    alt: "Download HPE's Adoption of Layer5 Meshery and Kanvas",
    $url: "/case-studies/hpe-adoption-of-layer5-meshery-and-kanvas.pdf",
    mdxType: "Button"
  })), mdx("p", null, "HPE, a leading technology company specializing in enterprise infrastructure, adopted Meshery Extension to enhance their Kubernetes deployments. HPE uses Kubernetes as a primary platform to build and deploy their containerized applications. The company has a large and complex Kubernetes environment, which requires robust networking solutions for efficient communication between services."), mdx(HPEfacts, {
    mdxType: "HPEfacts"
  }, mdx("tr", null, mdx("td", {
    colSpan: "2"
  }, mdx("h4", null, "HPE FAST FACTS"))), mdx("tr", null, mdx("td", null, mdx("img", {
    src: UsersIcon
  }), "Full Time Employees: 60,000+"), mdx("td", null, mdx("img", {
    src: GlobeIcon
  }), "Market Presence: HPE is one of the largest technology companies globally, serving customers in over 150 countries.")), mdx("tr", null, mdx("td", null, mdx("img", {
    src: LayersIcon
  }), "HPE GreenLake: HPE GreenLake is a key offering by the company, providing a flexible and scalable IT infrastructure model known as \"everything-as-a-service.\""), mdx("td", null, mdx("img", {
    src: NetworkIcon
  }), "Research and Development: HPE invests significantly in research and development to drive innovation. It operates HPE Labs, which focuses on developing cutting-edge technologies and solutions for the future."))), mdx("p", null, "SPIRE is a toolchain of APIs for establishing trust between software systems across a wide variety of hosting platforms. SPIRE exposes the SPIFFE Workload API, which can attest running software systems and issue SPIFFE IDs and SVIDs to them. ", mdx("br", null), mdx("br", null)), mdx(HPEbenefits, {
    mdxType: "HPEbenefits"
  }, mdx("b", null, "Meshery offers several benefits to HPE, including:"), mdx("br", null), "\u2714\uFE0F Consistent service mesh management: HPE can now manage all their service meshes consistently, regardless of the underlying infrastructure or cloud provider.", mdx("br", null), "\u2714\uFE0F Improved observability: With Meshery's built-in visualization and observability tools, HPE can gain insights into the behavior of their service meshes, detect anomalies, and troubleshoot issues in real-time.", mdx("br", null), "\u2714\uFE0F Simplified testing and validation: Meshery's service mesh validation capabilities enable HPE to easily test and validate their service meshes, ensuring that they meet their performance, security, and compliance requirements.", mdx("br", null), "\u2714\uFE0F Enhanced security: With Meshery's security features, HPE can ensure that their service meshes are secure and compliant with their organization's security policies."), mdx("br", null), mdx("p", null, "Overall, Meshery has helped HPE to streamline their integration of the identity management control plane to reduce complexity, and improve the overall reliability and performance of their Kubernetes environment. SPIFFE is a set of open-source specifications for a framework capable of bootstrapping and issuing identity to services across heterogeneous environments and organizational boundaries. The lifecycle of SPIFFE identities, SVIDs, is managed by SPIRE, a production-ready implementation of the SPIFFE APIs that performs node and workload attestation in order to securely issue SVIDs to workloads, and verify the SVIDs of other workloads, based on a predefined set of conditions."), mdx("p", null, mdx("b", null, "HPE's adoption of Meshery has also been enhanced by the platform's ability to integrate with other popular technologies, such as SPIRE and Istio")), mdx("p", {
    style: {
      display: "flex",
      justifyContent: "center",
      alignItem: "center",
      padding: "2%"
    }
  }, mdx("img", {
    src: MesheryIntegration
  })), mdx("p", null, "SPIRE is an open-source project that provides a secure and scalable solution for service identity and authentication in distributed systems. HPE uses SPIRE to authenticate and authorize services in their Kubernetes environment, which ensures that only authorized services can communicate with each other."), mdx("p", null, "Meshery's integration with SPIRE enables HPE to manage SPIRE instances, issue and revoke service certificates, and automate the management of SPIRE agents across their Kubernetes clusters. This integration ensures that HPE's service meshes are secure, and only authorized services can communicate with each other."), mdx(InlineQuotes, {
    quote: "With a goal to bring workload identity and attestation to all service meshes, HPE Security Engineering uses the Meshery's Extension to deploy their cloud native infrastructure of choice and test the performance of our SPIFFE and SPIRE-based identity solution.",
    person: "Maximiliano Churichi",
    title: "Software Engineer at HPE",
    image: Maxi,
    mdxType: "InlineQuotes"
  }), mdx("p", null, "In addition, HPE's use of Meshery has been enhanced by its integration with Istio, an open-source service mesh that provides a comprehensive solution for traffic management, security, and observability in Kubernetes environments."), mdx("p", null, "Meshery's integration with Istio enables HPE to manage Istio service meshes and configurations, automate the deployment of Istio components, and monitor and visualize Istio metrics and traces. This integration enables HPE to simplify the management of their Istio service meshes, ensure their security and compliance, and gain insights into their behavior for better decision-making."), mdx("p", null, "Overall, HPE's adoption of Meshery, along with its integration with SPIRE and Istio, has enabled the company to streamline their service mesh management, ensure the security and compliance of their Kubernetes environment, and gain valuable insights into the behavior of their service meshes for improved performance and reliability."), mdx("p", null, mdx("b", null, "Meshery also implements the Service Mesh Performance (SMP) specification")), mdx("p", null, "SMP is a community-driven effort that provides a standard for measuring and comparing the performance of different service meshes. It is designed to help users select the best service mesh for their needs by providing a common framework for benchmarking."), mdx(InlineQuotes, {
    quote: "The Layer5 team has been amazing. Our project wouldn\u2019t have been successful with out Meshery.",
    person: "Yogi Porla",
    title: "Engineering Manager, HPE",
    image: Yogi,
    mdxType: "InlineQuotes"
  }), mdx("p", null, "Meshery implements SMP by providing a simple and easy-to-use interface for running performance tests against different service meshes. Users can select the service mesh they want to test, configure the test parameters (such as the number of requests per second and the number of concurrent clients), and run the test. Meshery will then generate a report that shows the performance metrics for each service mesh, such as latency, throughput, and error rates."), mdx("p", null, "By implementing SMP, Meshery provides a valuable tool for developers and operators who are evaluating different service meshes. Instead of having to create their own benchmarks, they can use SMP to get an objective and standardized view of each service mesh's performance characteristics. This can save a significant amount of time and effort, and help users make more informed decisions when choosing a service mesh."), mdx("p", null, "Overall, HPE's use of Meshery and the Docker Extension for Meshery demonstrates the power of cloud native technologies and the importance of open source collaboration. By leveraging these tools, HPE has been able to streamline its development and deployment processes, improve performance and security, and stay at the forefront of the cloud native movement.")));
}
;
MDXContent.isMDXComponent = true;]]></description><link>https://layer5.io/resources/case-study/hpes-adoption-of-meshery-and-kanvas</link><guid isPermaLink="false">https://layer5.io/resources/case-study/hpes-adoption-of-meshery-and-kanvas</guid><dc:creator><![CDATA[Layer5 Team]]></dc:creator><pubDate>Sat, 17 Jun 2023 00:00:00 GMT</pubDate><enclosure url="https://layer5.io/static/91d038ef73208e4f202eecb42cb08c1f/meshery-and-hpe.svg" length="0" type="image/svg+xml"/><content:encoded></content:encoded></item><item><title><![CDATA[Configuring Highly Available Docker Swarm]]></title><description><![CDATA[var _excluded = ["components"];
function _extends() { return _extends = Object.assign ? Object.assign.bind() : function (n) { for (var e = 1; e < arguments.length; e++) { var t = arguments[e]; for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]); } return n; }, _extends.apply(null, arguments); }
function _objectWithoutProperties(e, t) { if (null == e) return {}; var o, r, i = _objectWithoutPropertiesLoose(e, t); if (Object.getOwnPropertySymbols) { var n = Object.getOwnPropertySymbols(e); for (r = 0; r < n.length; r++) o = n[r], -1 === t.indexOf(o) && {}.propertyIsEnumerable.call(e, o) && (i[o] = e[o]); } return i; }
function _objectWithoutPropertiesLoose(r, e) { if (null == r) return {}; var t = {}; for (var n in r) if ({}.hasOwnProperty.call(r, n)) { if (-1 !== e.indexOf(n)) continue; t[n] = r[n]; } return t; }
/* @jsxRuntime classic */
/* @jsx mdx */

var _frontmatter = {
  "title": "Configuring Highly Available Docker Swarm",
  "thumbnail": "./docker-swarm.webp",
  "darkthumbnail": "./docker-swarm.webp",
  "date": "2023-05-18 10:30:05 -0530",
  "category": "Docker",
  "tags": ["Meshery", "Tutorial"],
  "type": "Tutorial",
  "product": "Meshery",
  "technology": "Docker",
  "featured": false,
  "published": true,
  "resource": true
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = "wrapper";
return function MDXContent(_ref) {
  var components = _ref.components,
    props = _objectWithoutProperties(_ref, _excluded);
  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: "MDXLayout"
  }), mdx(ResourcesWrapper, {
    mdxType: "ResourcesWrapper"
  }, mdx("p", null, "Docker Swarm is a", " ", mdx(Link, {
    to: "../../articles/kubernetes/management-of-kubernetes",
    mdxType: "Link"
  }, "container orchestration"), " ", "tool that makes it easy to manage and scale your existing Docker infrastructure. It consists of a pool of Docker hosts that run in Swarm mode with some nodes acting as managers, workers, or both. Using Docker Swarm mode to manage your Docker containers brings the following benefits:"), mdx("ul", null, mdx("li", null, "It allows you to incrementally apply updates with zero downtime."), mdx("li", null, "It increases application resilience to outages by reconciling any differences between the actual state and your expressed desired state."), mdx("li", null, "It eases the process of scaling your applications since you only need to define the desired number of replicas in the cluster."), mdx("li", null, "It is built into the ", mdx("code", null, "docker"), " CLI, so you don't need additional software to get up and running."), mdx("li", null, "It enables multi-host networking such that containers deployed on different nodes can communicate with each other easily.")), mdx("p", null, "In this tutorial, you will learn key concepts in Docker Swarm and set up a highly available Swarm cluster that is resilient to failures. You will also learn some best practices and recommendations to ensure that your Swarm setup is fault tolerant."), mdx("h2", {
    id: "prerequisites"
  }, "Prerequisites"), mdx("p", null, "Before proceeding with this tutorial, ensure that you have access to five Ubuntu 22.04 servers. This is necessary to demonstrate a highly available set up, although it is also possible to run Docker Swarm on a single machine. You also need to configure each server with a user that has administrative privileges."), mdx("p", null, "The following ports must also be available on each server for communication purposes between the nodes. On Ubuntu 22.04, they are open by default:"), mdx("ul", null, mdx("li", null, "TCP port 2377 for cluster management communications,"), mdx("li", null, "TCP and UDP port 7946 for communication among nodes,"), mdx("li", null, "TCP and UDP port 4789 for overlay network traffic.")), mdx("h2", {
    id: "explaining-docker-swarm-terminology"
  }, "Explaining Docker Swarm terminology"), mdx("p", null, "Before proceeding with this tutorial, let's examine some terms and definitions in Docker Swarm so that you have enough understanding of what each one means when they are used in this article and in other Docker Swarm resources."), mdx("div", null, mdx("ul", null, mdx("li", null, mdx("strong", null, "Node"), ": refers to an instance of the Docker engine in the Swarm cluster."), mdx("li", null, mdx("strong", null, "Manager nodes"), ": they are tasked with handling orchestration and cluster management functions, and dispatching incoming tasks to worker nodes. They can also act as worker nodes unless placed in Drain mode (recommended)."), mdx("li", null, mdx("strong", null, "Leader"), ": this is a specific manager node that is elected to perform orchestration tasks and management/maintenance operations by all the manager nodes in the cluster using the ", mdx("a", {
    rel: "",
    target: "_blank",
    className: "whitespace-nowrap",
    href: "https://raft.github.io/"
  }, "Raft Consensus Algorithm"), "."), mdx("li", null, mdx("strong", null, "Worker nodes"), ": are Docker instances whose sole purpose is to receive and execute Swarm tasks from manager nodes."), mdx("li", null, mdx("strong", null, "Swarm task"), ": refers to a Docker container and the commands that run inside the container. Once a task is assigned to a node, it can run or fail but it cannot be transferred to a different node."), mdx("li", null, mdx("strong", null, "Swarm service"), ": this is the mechanism for defining tasks that should be executed on a node. It involves specifying the container image and commands that should run inside the container."), mdx("li", null, mdx("strong", null, "Drain"), ": means that new tasks are no longer assigned to a node, and existing tasks are reassigned to other available nodes.")), mdx("h2", {
    id: "docker-swarm-requirements-for-high-availability"
  }, "Docker Swarm requirements for high availability"), mdx("p", null, "A highly available Docker Swarm setup ensures that if a node fails, services on the failed node are re-provisioned and assigned to other available nodes in the cluster. A Docker Swarm setup that consists of one or two manager nodes is not considered highly available because any incident will cause operations on the cluster to be interrupted. Therefore the minimum number of manager nodes in a highly available Swarm cluster should be three."), mdx("p", null, "The table below shows the number of failures a Swarm cluster can tolerate depending on the number of manager nodes in the cluster:"), mdx("div", null, mdx("table", null, mdx("thead", null, mdx("tr", null, mdx("th", null, "Manager Nodes"), mdx("th", null, "Failures tolerated"))), mdx("tbody", null, mdx("tr", null, mdx("td", null, "1"), mdx("td", null, "0")), mdx("tr", null, mdx("td", null, "2"), mdx("td", null, "0")), mdx("tr", null, mdx("td", null, "3"), mdx("td", null, "1")), mdx("tr", null, mdx("td", null, "4"), mdx("td", null, "1")), mdx("tr", null, mdx("td", null, "5"), mdx("td", null, "2")), mdx("tr", null, mdx("td", null, "6"), mdx("td", null, "2")), mdx("tr", null, mdx("td", null, "7"), mdx("td", null, "3"))))), mdx("p", null, "As you can see, having an even number of manager nodes does not help with failure tolerance, so you should always maintain an odd number of manager nodes. Fault tolerance improves as you add more manager nodes, but Docker recommends no more than seven managers so that performance is not negatively impacted since each node must acknowledge proposals to update the state of the cluster."), mdx("p", null, "You should also distribute your manager nodes in separate locations so they are not affected by the same outage. If they run on the same server, a hardware problem could cause them all to go down. The high availability Swarm cluster that you will be set up in this tutorial will therefore exhibit the following characteristics:"), mdx("ul", null, mdx("li", null, "5 total nodes (2 workers and 3 managers) with each one running on a separate server."), mdx("li", null, "2 worker nodes (", mdx("code", null, "worker-1"), " and ", mdx("code", null, "worker-2"), ")."), mdx("li", null, "3 manager nodes (", mdx("code", null, "manager-1"), ", ", mdx("code", null, "manager-2"), ", and ", mdx("code", null, "manager-3"), ").")), mdx(PlaygroundCTA, {
    mdxType: "PlaygroundCTA"
  }), mdx(DockerExtensionCTA, {
    mdxType: "DockerExtensionCTA"
  }), mdx("h2", {
    id: "step-1-installing-docker"
  }, "Step 1 \u2014 Installing Docker"), mdx("p", null, "In this step, you will install Docker on all five Ubuntu servers. Therefore, execute all the commands below (and in step 2) on all five servers. If your host offers a snapshot feature, you may be able to run the commands on a single server and use that server as a base for the other four instances."), mdx("p", null, "Let's start by installing the latest version of the Docker Engine (20.10.18 at the time of writing). Go ahead and update the package information list from all configured sources on your system:"), mdx("pre", null, mdx("code", null, "sudo apt update")), mdx("p", null, "Afterward, install the following packages to allow ", mdx("code", null, "apt"), " to use packages over HTTPS:"), mdx("pre", null, mdx("code", null, "sudo apt install apt-transport-https ca-certificates curl software-properties-common")), mdx("p", null, "Next, add the GPG key for the official Docker repository to the server:"), mdx("pre", null, mdx("code", null, "curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg")), mdx("p", null, "Once the GPG key is added, include the official Docker repository in the server's apt sources list:"), mdx("pre", null, mdx("code", null, "echo \"deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable\" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null")), mdx("p", null, "Finally, update apt once again and install the Docker Engine:"), mdx("pre", null, mdx("code", null, "sudo apt update")), mdx("pre", null, mdx("code", null, "sudo apt install docker-ce")), mdx("p", null, "Once the relevant packages are installed, you can check the status of the ", mdx("code", null, "docker"), " service using the command below:"), mdx("pre", null, mdx("code", null, "sudo systemctl status docker")), mdx("p", null, "If everything goes well, you should observe that the container engine is active and running on your server."), mdx("h2", {
    id: "step-2-executing-the-docker-command-without-sudo"
  }, "Step 2 \u2014 Executing the Docker command without sudo"), mdx("p", null, "By default, the ", mdx("code", null, "docker"), " command can only be executed by the root user or any user in the ", mdx("code", null, "docker"), " group (auto created on installation). If you execute a ", mdx("code", null, "docker"), " command without prefixing it with ", mdx("code", null, "sudo"), " or running it through a user that belongs to the ", mdx("code", null, "docker"), " group, you will get a permission error that looks like this:"), mdx("pre", null, mdx("code", null, "Got permission denied while trying to connect to the Docker daemon socket at unix:///var/run/docker.sock: Get \"http://%2Fvar%2Frun%2Fdocker.sock/v1.24/containers/json\": dial unix /var/run/docker.sock: connect: permission denied")), mdx("p", null, "As mentioned earlier, using ", mdx("code", null, "sudo"), " with ", mdx("code", null, "docker"), " is a security risk, so the solution to the above error is to add the relevant user to the ", mdx("code", null, "docker"), " group. This can be achieved through the command below:"), mdx("pre", null, mdx("code", null, "sudo usermod -aG docker $USER")), mdx("p", null, "Next, run the following command and enter the user's password when prompted for the changes to take effect:"), mdx("pre", null, mdx("code", null, "su - $USER")), mdx("p", null, "You should now be able to run ", mdx("code", null, "docker"), " commands without prefixing them with ", mdx("code", null, "sudo"), ". For example, when you run the command ", mdx("code", null, "docker ps"), ", you should observe the output."), mdx("p", null, "Before proceeding to the next step, ensure that all the commands in step 1 and step 2 have been executed on all five servers."), mdx("h2", null, "Step 3 \u2014 Initializing the Swarm Cluster"), mdx("p", null, "At this point, each of your five Docker instances are acting as separate hosts and not as part of a Swarm cluster. Therefore, in this step, we will initialize the Swarm cluster on the ", mdx("code", null, "manager-1"), " server and add the hosts to the cluster accordingly."), mdx("p", null, "Start by logging into one of the Ubuntu servers (", mdx("code", null, "manager-1"), ") and retrieve the private IP address of the machine using the following command:"), mdx("pre", null, mdx("code", null, "hostname -I | awk '{print $1}'")), mdx("p", null, "Copy the IP address to your clipboard and replace the ", mdx("code", null, "<manager_1_server_ip>"), " placeholder in the command below to initialize Swarm mode:"), mdx("pre", null, mdx("code", null, "docker swarm init --advertise-addr <manager_1_server_ip>")), mdx("p", null, "If the command is successful, you will see output indicating that the Swarm has been initialized and that the current node is now a manager. It will also provide a command to join worker nodes to the cluster. Copy the command for later use."), mdx("p", null, "Next, SSH into each of the other four Ubuntu servers (manager-2, manager-3, worker-1, and worker-2) and run the command you copied earlier to join them to the Swarm cluster. The command should look like this:"), mdx("pre", null, mdx("code", null, "docker swarm join --token <token> <manager_1_server_ip>:<port>")), mdx("p", null, "After running the command on each server, you should see output indicating that the node has joined the Swarm as either a manager or a worker. To verify the status of the Swarm cluster, you can run the command ", mdx("code", null, "docker node ls"), " on the manager node:"), mdx("pre", null, mdx("code", null, "docker node ls")), mdx("p", null, "You should see a list of all the nodes in the Swarm cluster, including their IDs, hostname, status, availability, and whether they are a manager or a worker."), mdx("h2", null, "Step 4 \u2014 Deploying the Application Stack"), mdx("p", null, "Now that you have a functioning Docker Swarm cluster, you can deploy your application stack. In this tutorial, we will use a simple example of a web application stack consisting of a front-end service and a back-end service."), mdx("p", null, "Start by creating a new directory for your application stack on the manager node:"), mdx("pre", null, mdx("code", null, "mkdir app-stack cd app-stack")), mdx("p", null, "Next, create a file called ", mdx("code", null, "docker-compose.yml"), " in the ", mdx("code", null, "app-stack"), " directory and open it in a text editor:"), mdx("pre", null, mdx("code", null, "nano docker-compose.yml")), mdx("p", null, "Copy and paste the following YAML code into the ", mdx("code", null, "docker-compose.yml"), " file:"), mdx("pre", null, mdx("code", null, "version: '3.8' services: frontend: image: nginx:latest ports: - 80:80 deploy: replicas: 2 restart_policy: condition: on-failure backend: image: httpd:latest ports: - 8080:80 deploy: replicas: 2 restart_policy: condition: on-failure")), mdx("p", null, "This Docker Compose file defines two services: ", mdx("code", null, "frontend"), " and ", mdx("code", null, "backend"), ". The ", mdx("code", null, "frontend"), " service uses the ", mdx("code", null, "nginx:latest"), " image and maps port 80 of the host to port 80 of the container. It is configured to have 2 replicas and to restart on failure. The ", mdx("code", null, "backend"), " service uses the ", mdx("code", null, "httpd:latest"), " image and maps port 8080 of the host to port 80 of the container. It is also configured to have 2 replicas and to restart on failure."), mdx("p", null, "Save and close the ", mdx("code", null, "docker-compose.yml"), " file."), mdx("p", null, "To deploy the application stack, run the following command:"), mdx("pre", null, mdx("code", null, "docker stack deploy -c docker-compose.yml app-stack")), mdx("p", null, "If the command is successful, you should see output indicating that the services are being deployed. You can check the status of the services by running the command ", mdx("code", null, "docker service ls"), ":"), mdx("pre", null, mdx("code", null, "docker service ls")), mdx("p", null, "You should see a list of the services in the stack, including their names, mode, replicas, and ports."), mdx("h2", null, "Conclusion"), mdx("p", null, "In this tutorial, you learned how to set up a highly available Docker Swarm cluster and deploy a simple application stack. This setup provides fault tolerance and load balancing for your applications, allowing you to scale them easily as your needs grow."), mdx("p", null, "Next steps:"), mdx("ul", null, mdx("li", null, "Explore more Docker Swarm features, such as service updates and rolling updates."), mdx("li", null, "Deploy your own application stack using Docker Compose."), mdx("li", null, "Learn about Docker networking and how to create overlay networks.")))));
}
;
MDXContent.isMDXComponent = true;]]></description><link>https://layer5.io/resources/docker/configuring-highly-available-docker-swarm</link><guid isPermaLink="false">https://layer5.io/resources/docker/configuring-highly-available-docker-swarm</guid><pubDate>Thu, 18 May 2023 00:00:00 GMT</pubDate><enclosure url="https://layer5.io/static/5b72df1802df0608ac6ee6e6bff70c9d/docker-swarm.webp" length="0" type="image/webp"/><content:encoded></content:encoded></item><item><title><![CDATA[Terraform with Meshery]]></title><description><![CDATA[var _excluded = ["components"];
function _extends() { return _extends = Object.assign ? Object.assign.bind() : function (n) { for (var e = 1; e < arguments.length; e++) { var t = arguments[e]; for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]); } return n; }, _extends.apply(null, arguments); }
function _objectWithoutProperties(e, t) { if (null == e) return {}; var o, r, i = _objectWithoutPropertiesLoose(e, t); if (Object.getOwnPropertySymbols) { var n = Object.getOwnPropertySymbols(e); for (r = 0; r < n.length; r++) o = n[r], -1 === t.indexOf(o) && {}.propertyIsEnumerable.call(e, o) && (i[o] = e[o]); } return i; }
function _objectWithoutPropertiesLoose(r, e) { if (null == r) return {}; var t = {}; for (var n in r) if ({}.hasOwnProperty.call(r, n)) { if (-1 !== e.indexOf(n)) continue; t[n] = r[n]; } return t; }
/* @jsxRuntime classic */
/* @jsx mdx */

var _frontmatter = {
  "title": "Terraform with Meshery",
  "subtitle": null,
  "date": "2022-12-22 08:00:00 -0530",
  "author": "Gaurav Chadha",
  "thumbnail": "./terraform-color.svg",
  "darkthumbnail": "./terraform-color.svg",
  "description": "Terraform Infrastructure as Code with Meshery",
  "type": "Article",
  "category": "Cloud Native",
  "tags": ["Cloud Native, Meshery"],
  "featured": false,
  "published": true,
  "resource": true
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = "wrapper";
return function MDXContent(_ref) {
  var components = _ref.components,
    props = _objectWithoutProperties(_ref, _excluded);
  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: "MDXLayout"
  }), mdx(ResourcesWrapper, {
    mdxType: "ResourcesWrapper"
  }, mdx("p", null, "Terraform is a powerful tool that helps users manage and provision infrastructure resources in a consistent and efficient manner. With Terraform, you can define your infrastructure as code, using human-readable configuration files that can be versioned, shared, and reused. This makes it easy to create, modify, and manage your infrastructure resources, whether they are cloud-based or on-premises."), mdx("div", {
    className: "intro"
  }, mdx("p", null, "It is an open source tool that codifies APIs into declarative configuration files that can be shared amongst team members, treated as code, edited, reviewed, and versioned.")), mdx("p", null, "One way to further enhance your use of Terraform is by integrating it with Meshery. Meshery is a cloud-native management platform that provides a unified interface for managing and monitoring your infrastructure resources, including those managed by Terraform. By integrating Terraform with Meshery, you can leverage the power and flexibility of both tools to streamline your infrastructure management process."), mdx("p", null, "One of the key benefits of using Terraform with Meshery is the ability to manage and monitor infrastructure resources in a consistent and centralized manner. With Meshery, you can view and manage all of your infrastructure resources, whether they are managed by Terraform or other tools, from a single dashboard. This allows you to quickly identify any issues or potential problems with your infrastructure, and take action to resolve them in a timely manner."), mdx("p", null, "Another benefit of using Terraform with Meshery is the ability to automate your infrastructure management process. With Meshery, you can create and manage automated pipelines for provisioning and managing your infrastructure resources. This can help to reduce the time and effort required to manage your infrastructure, and allow you to focus on other important tasks."), mdx("p", null, "In addition to these benefits, using Terraform with Meshery also provides a number of other advantages. For example, Meshery integrates with a wide range of tools and platforms, allowing you to easily incorporate your existing infrastructure resources into your management process. This can help to reduce the complexity of managing your infrastructure, and make it easier to keep everything running smoothly."), mdx("p", null, "Overall, the use of Terraform with Meshery can help to streamline and improve your infrastructure management process. By integrating these two powerful tools, you can gain greater visibility and control over your infrastructure resources, and automate many of the tasks involved in managing them. This can help to reduce the time and effort required to manage your infrastructure, and allow you to focus on other important tasks. So, it is a good idea to use Terraform with Meshery to improve the efficiency and effectiveness of your infrastructure management process.")));
}
;
MDXContent.isMDXComponent = true;]]></description><link>https://layer5.io/resources/cloud-native/terraform-with-meshery</link><guid isPermaLink="false">https://layer5.io/resources/cloud-native/terraform-with-meshery</guid><dc:creator><![CDATA[Gaurav Chadha]]></dc:creator><pubDate>Thu, 22 Dec 2022 00:00:00 GMT</pubDate><enclosure url="https://layer5.io/static/895ec8ea35cf68449389f73e4285cb39/terraform-color.svg" length="0" type="image/svg+xml"/><content:encoded></content:encoded></item><item><title><![CDATA[Management of Kubernetes]]></title><description><![CDATA[var _excluded = ["components"];
function _extends() { return _extends = Object.assign ? Object.assign.bind() : function (n) { for (var e = 1; e < arguments.length; e++) { var t = arguments[e]; for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]); } return n; }, _extends.apply(null, arguments); }
function _objectWithoutProperties(e, t) { if (null == e) return {}; var o, r, i = _objectWithoutPropertiesLoose(e, t); if (Object.getOwnPropertySymbols) { var n = Object.getOwnPropertySymbols(e); for (r = 0; r < n.length; r++) o = n[r], -1 === t.indexOf(o) && {}.propertyIsEnumerable.call(e, o) && (i[o] = e[o]); } return i; }
function _objectWithoutPropertiesLoose(r, e) { if (null == r) return {}; var t = {}; for (var n in r) if ({}.hasOwnProperty.call(r, n)) { if (-1 !== e.indexOf(n)) continue; t[n] = r[n]; } return t; }
/* @jsxRuntime classic */
/* @jsx mdx */

var _frontmatter = {
  "title": "Management of Kubernetes",
  "date": "2022-11-21 10:30:05 -0530",
  "author": "Tolulope Ola-David",
  "thumbnail": "./kubernetes-logo.svg",
  "darkthumbnail": "./kubernetes-logo.svg",
  "description": "Management of Kubernetes",
  "type": "Article",
  "published": true,
  "category": "Kubernetes",
  "tags": ["Kubernetes"],
  "resource": true,
  "redirect_from": ["/articles/kubernetes/management-of-kubernetes"]
};
var makeShortcode = function makeShortcode(name) {
  return function MDXDefaultShortcode(props) {
    console.warn("Component " + name + " was not imported, exported, or provided by MDXProvider as global scope");
    return mdx("div", props);
  };
};
var CTA_FullWidth = makeShortcode("CTA_FullWidth");
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = "wrapper";
return function MDXContent(_ref) {
  var components = _ref.components,
    props = _objectWithoutProperties(_ref, _excluded);
  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: "MDXLayout"
  }), mdx(ResourcesWrapper, {
    mdxType: "ResourcesWrapper"
  }, mdx("h3", null, " What is Kubernetes Management, and Why Should You Care? "), mdx("p", null, " It is easy to understand why Kubernetes has become one of the most popular tools on the market today. Primarily, it allows you to easily manage Docker containers across your entire infrastructure with very little overhead, making it easier than ever to manage massive amounts of information in a timely manner. But what are you supposed to do with all this information? That\u2019s where Kubernetes management comes into play\u2014the process of using that information in an effective manner can make or break your efforts, so it\u2019s essential that you choose the right solutions from the get-go."), mdx("h3", null, " Defining Kubernetes management "), mdx("p", null, " Kubernetes management is the process of managing your containers on a Kubernetes cluster. This can include things like adding or removing clusters, scaling clusters up or down, balancing workloads across nodes in a cluster, and restarting failed containers or nodes in a cluster. These tasks are complicated and involve many different types of actions. Figuring out how to do them all manually would be extremely time-consuming. Fortunately, there are tools like Meshery that automate these tasks for you, making it easier to see what\u2019s going on within your cluster so you can make informed decisions about what needs to happen next. Staying on top of Kubernetes management will not only keep your cluster running smoothly but also help prevent problems before they occur. Automating this process will save you time and money, leaving more time to focus on other aspects of the business. When things go wrong, automated Kubernetes management allows you to have a plan and know exactly what steps need to be taken to recover from an incident. With these benefits in mind, it\u2019s important that companies with containerized infrastructure use some type of automation for their Kubernetes management."), mdx("h3", null, " The benefits of Kubernetes management "), mdx("p", null, " Kubernetes management can seem like a daunting task. In the past, IT teams had to worry about maintaining large clusters of machines that required constant tweaking and monitoring. Kubernetes simplifies this process by automating tasks such as:", mdx("ul", null, mdx("li", null, " Monitoring cluster health "), mdx("li", null, " Deploying apps across nodes "), mdx("li", null, " Running rolling updates "), mdx("li", null, " Scaling up or down resources on demand "), mdx("li", null, " Auto-recover from failures "), mdx("li", null, " Application deployment consistency "), mdx("li", null, " Managing container upgrades ")), "After reading through these benefits, you may be asking yourself, \"Why should I care? Here are two reasons why you should care about Kubernetes management: - Kubernetes management has been shown to improve software development efficiency because it reduces time spent waiting for containers to restart and redeploy. A recent study showed that developers using Kubernetes were able to deploy new code changes at least 27% faster than developers without any container orchestration solution."), mdx("p", null, " Kubernetes management has also been shown to reduce operational costs because it eliminates the need for manual intervention in scaling applications, updating running containers with new versions, etc. If your IT team was spending 10 hours per week on manual operations before adopting Kubernetes, they'll spend only 2 hours after switching over! "), mdx(CTA_FullWidth, {
    image: ClusterImg,
    alt: "Multi-Cluster Kubernetes Management with Meshery",
    content: "Multi-Cluster Kubernetes Management with Meshery",
    button_text: "Read blog post",
    url: "/blog/meshery/multi-cluster-kubernetes-management-with-meshery",
    external_link: false,
    className: "get-start-kubernetes-resource",
    mdxType: "CTA_FullWidth"
  }), mdx("h3", null, " The challenges of Kubernetes management "), mdx("p", null, " Kubernetes management can seem like a difficult endeavour. Between determining how to automate deployment and scaling and comprehending the fundamentals of how it operates, there are numerous factors to consider. Fortunately, there are numerous frameworks that simplify this procedure. But before going into new frameworks or technologies, you must grasp what Kubernetes administration comprises so that you know what you're attempting to automate. Kubernetes management comprises a variety of activities, such as building up clusters, keeping apps running on those clusters up-to-date, monitoring usage and providing alarms to keep things running smoothly, and shutting down clusters when they are no longer required. "), mdx("p", null, " There are numerous ways to manage these tasks: manually, with containers, with an orchestration system such as Ansible Tower, Cloud Control 12c, or ServiceNow NMS, with containers-as-a-service providers such as Docker Datacenter or AWS EKS, with container service offerings from cloud providers such as Azure Container Instances, by configuring Kubernetes with your own framework, and by installing Kubectl on your laptop for direct control. Each strategy has advantages and disadvantages that may make one more suitable for your organisation than another. Regardless of the approach you adopt, you must plan accordingly. "), mdx("p", null, " Importantly, the fact that Kubernetes is gaining popularity does not imply that it will replace your existing infrastructure layers. It augments their capabilities with scalability and large-scale application management (which would have been difficult without automation). In addition, the definition of management varies based on the size of the organisation: small businesses may prefer self-hosted platforms, whilst larger businesses would often primarily rely on SaaS solutions. "), mdx("h3", null, " How Meshery makes it easier to run Kubernetes "), mdx("p", null, " Meshery is the only cloud-native manager in the world that supports more adapters than any other project or product. "), mdx("img", {
    src: picture1,
    className: "image-center",
    alt: "Management of Kubernetes with Meshery"
  }), mdx("p", null, " Meshery has been designed for the world of many service meshes and many Kubernetes clusters. As such, great attention was made to guarantee that it is an extensible management platform, able to handle a diverse range of infrastructure and new use cases quickly through its plugin mechanism. Meshery Server acts as an operation delegator, determining which Meshery Adapter has registered its capacity for the given operation. The operation is then sent to the appropriate component using a gRPC call. This could be one of Meshery's service mesh adapters, like the Istio adapter. "), mdx("p", null, " Meshery's capability is constantly expanding, from multi-mesh to now multi-cluster, to give developers, operators, and security engineers more control over their infrastructure. Each part of Meshery's architecture makes a big difference in how it manages multiple Kubernetes clusters. "), mdx("h3", null, " Meshery management across many clusters "), mdx("p", null, " From the settings page, users can do things related to clusters, like add more clusters, remove data from existing clusters, or delete existing clusters. "), mdx("img", {
    src: picture2,
    className: "image-center",
    alt: "Management of Kubernetes with Meshery"
  }), mdx("p", null, " Meshery also deploys Meshery operators throughout the cluster it is about to manage. This operator is in charge of the Meshery broker and the MeshSync lifecycle. MeshSync is responsible for monitoring various types of resources by establishing a watch stream over each of them. MeshSync then sends the data to the NATS server, of which the Meshery server is a client. Meshery server then receives all necessary data relating to cluster activity. "), mdx("img", {
    src: picture3,
    className: "image-center",
    alt: "Management of Kubernetes with Meshery"
  }), mdx("p", null, " Meshery, by default, wants to be as aware of your infrastructure as possible in order to deliver value. As such, it deploys its operator across each identified cluster. However, you can fine-tune this configuration by going over each one. "), mdx("h3", null, " The future of Kubernetes management "), mdx("p", null, " Kubernetes management has been one of the buzzwords since 2018. But what does it actually mean? And why should you care about it? At its core, Kubernetes management is a system that helps make sense of the nuances of how different containers work together to create an application. As we rely more on containers for our everyday apps, there needs to be a way to keep track of them all. That's where Kubernetes comes in with its ability to manage these containers that are spread out across different servers and understand which ones need more resources or want to be shut down because they're no longer needed. The easier it becomes for developers and engineers to deploy applications without worrying about how they are going to be managed, the better off everyone will be. Fortunately, as containerization grows in popularity among developers and IT teams alike, so does the number of tools for managing it. "), mdx("p", null, " A lot of container platforms provide native management functionality: Docker Swarm allows you to use simple commands like swarm stop or swarm pull when your swarm is up-to-date; Kargo automatically manages clusters using zero-touch configuration; Rancher provides tools to manage containers using any infrastructure stack; and Mesos offers both orchestration capabilities through Marathon as well as advanced resource scheduling features. It's not always easy to know which platform will work best for your organization, but it's important to find one that suits your company's needs\u2014especially if IT is looking forward to a future without manual management tasks! ")));
}
;
MDXContent.isMDXComponent = true;]]></description><link>https://layer5.io/resources/kubernetes/management-of-kubernetes</link><guid isPermaLink="false">https://layer5.io/resources/kubernetes/management-of-kubernetes</guid><dc:creator><![CDATA[Tolulope Ola-David]]></dc:creator><pubDate>Mon, 21 Nov 2022 00:00:00 GMT</pubDate><enclosure url="https://layer5.io/static/9287b4a708bb510f64057ea305498b77/kubernetes-logo.svg" length="0" type="image/svg+xml"/><content:encoded></content:encoded></item><item><title><![CDATA[Getting Started with Kubernetes]]></title><description><![CDATA[var _excluded = ["components"];
function _extends() { return _extends = Object.assign ? Object.assign.bind() : function (n) { for (var e = 1; e < arguments.length; e++) { var t = arguments[e]; for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]); } return n; }, _extends.apply(null, arguments); }
function _objectWithoutProperties(e, t) { if (null == e) return {}; var o, r, i = _objectWithoutPropertiesLoose(e, t); if (Object.getOwnPropertySymbols) { var n = Object.getOwnPropertySymbols(e); for (r = 0; r < n.length; r++) o = n[r], -1 === t.indexOf(o) && {}.propertyIsEnumerable.call(e, o) && (i[o] = e[o]); } return i; }
function _objectWithoutPropertiesLoose(r, e) { if (null == r) return {}; var t = {}; for (var n in r) if ({}.hasOwnProperty.call(r, n)) { if (-1 !== e.indexOf(n)) continue; t[n] = r[n]; } return t; }
/* @jsxRuntime classic */
/* @jsx mdx */

var _frontmatter = {
  "title": "Getting Started with Kubernetes",
  "date": "2022-11-02 10:30:05 -0530",
  "author": "Tolulope Ola-David",
  "thumbnail": "./kubernetes-logo.svg",
  "darkthumbnail": "./kubernetes-logo.svg",
  "description": "Introduction to Kubernetes",
  "type": "Article",
  "published": true,
  "category": "Kubernetes",
  "tags": ["Kubernetes"],
  "resource": true
};
var makeShortcode = function makeShortcode(name) {
  return function MDXDefaultShortcode(props) {
    console.warn("Component " + name + " was not imported, exported, or provided by MDXProvider as global scope");
    return mdx("div", props);
  };
};
var CTA_FullWidth = makeShortcode("CTA_FullWidth");
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = "wrapper";
return function MDXContent(_ref) {
  var components = _ref.components,
    props = _objectWithoutProperties(_ref, _excluded);
  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: "MDXLayout"
  }), mdx(ResourcesWrapper, {
    mdxType: "ResourcesWrapper"
  }, mdx("p", null, "Kubernetes, an open-source container orchestration platform, is growing in popularity for deploying and managing cloud-native applications. Kubernetes was created by Google in 2014, and it is now used by many major companies, including IBM, Microsoft, Red Hat, and Amazon. In this article, we'll talk about Kubernetes, its benefits, and the best ways for your organization to use it."), mdx("h3", null, " What is Kubernetes? "), mdx("p", null, "Kubernetes offers fully managed and adapted architecture services that optimize your cloud-native application. Kubernetes is a platform that hides virtual machines, shows the infrastructure as an infrastructure-as-a-service (IAAS), network, and load balancer, and offers data storage and operations that are consistent across containers."), mdx("p", null, " For example, Kubernetes nodes work as Kubernetes containers, such as an application, an application server, and control processes in Docker containers. Kubernetes components such as Kubernetes nodes and Kubernetes containers can be defined or modified via configuration files or can be specified subsequently. Individual Kubernetes components can be scaled according to elasticity needs to optimize performance."), mdx("p", null, " Kubernetes optimizes a Kubernetes environment in the cloud, Docker containers on a system for development or testing, and the master or control plane of its cloud cluster management infrastructure."), mdx("h3", null, " What's the Difference between Kubernetes and Docker? "), mdx("p", null, "Over the past few years, containers have become increasingly popular within the software development community, and they have now evolved into two major platforms \u2014 Docker and Kubernetes. Both are incredibly powerful tools that allow developers to containerize their applications, but they are also slightly different in a number of ways, with more differences on the horizon as Docker announces its new focus on Kubernetes and containers orchestration. How do you decide which one to use? What does the future hold for each? Here\u2019s what you need to know about the difference between Docker and Kubernetes."), mdx("p", null, " Docker is an open-source platform designed to help developers and IT professionals create, deploy, and run applications. This containerization technology is often used in conjunction with orchestration software such as Kubernetes. However, these two technologies are not interchangeable; they serve different purposes. "), mdx("h3", null, " Why Should You Care About Kubernetes? "), mdx("p", null, " Kubernetes was first made available for Google's internal use for DNS hosting. Open-source software projects were not able to use it. "), mdx("p", null, " Today, Kubernetes is in use by large-scale companies that use container orchestration. And in January 2019, The New Stack reported that a survey conducted in that month, which included the Kubernetes user group, discovered that Kubernetes reached more than 40,000 users and 200 companies were working on Kubernetes at that point. In addition, Gartner indicated that Kubernetes Inc. would make some $8.5 billion in 2019. "), mdx("h3", null, " What does Kubernetes Do? "), mdx("p", null, " In contrast to an overall infrastructure, Kubernetes is a dynamic layer-oriented computing infrastructure. The essence of Kubernetes is how an entire infrastructure hops! Kubernetes is a container orchestration and management platform that has built-in features for self-replication, elasticity, and scalability. Through these and more features, Kubernetes \"promovi-is\" for container orchestrators for both production and lab environments. "), mdx("h3", null, " Kubernetes Architecture "), mdx("p", null, " Even though Kubernetes is a software platform that lets organizations manage their application workloads in containers, a traditional Kubernetes cluster may not be the best solution for a number of business needs. "), mdx("img", {
    src: picture1,
    className: "image-center",
    alt: "Kubernetes Architecture"
  }), mdx("p", null, " A cluster of virtual computing resources is only one option, and it has its drawbacks. What happens when you lose disk space (which can happen if you don't add new containers, users, or workloads to a cluster)? Do you have another cluster for redundancy, and how do you integrate the two together? "), mdx("p", null, " Hyperconverged infrastructures like Red Hat OpenShift are an alternative that combine several technologies into a single virtual machine or physical machine. "), mdx("h3", null, " Best Practices for Kubernetes "), mdx("p", null, "Kubernetes is a container orchestration platform created by Google in 2014. It provides a way for companies to build fully self-sufficient, scalable, multi-container applications every time they need to deploy and manage their own containers. It's aimed at pretty much the same audience as Docker and other container orchestration platforms\u2014that is, organizations that run containerized applications and want to deploy scalable, repeatable deployments."), mdx("p", null, "At the most basic and most simplistic level, a group of containers (usually 16) is cross-linked together in a cluster, based on Docker. Containers run inside a cluster of virtual machines (Kubernetes VM) as a single Linux file system. Kubernetes organizes the creation, deletion, and management of containers into container concepts that provide fault tolerance, availability, scaling, permission management, and secure containers that should be able to run together and share resources. Each host runs one or more containers, providing the abstraction of which containers can run on which hosts."), mdx("p", null, "Since Kubernetes services are usually very easy to use, the user experience is very similar to that of centralized solutions. "), mdx("p", null, "With Kubernetes, businesses can make data repositories and containers, federate their resources in an efficient way, manage billing, certify capacity, quota, access rights, and more. "), mdx("p", null, "It can scale to many nodes simultaneously, so when their machines scale up, then their containers could scale up too. "), mdx("h3", null, "Kubernetes Concepts and Terminology "), mdx("p", null, "Kubernetes was developed in 2014 as a Google container orchestrator, a container scheduler and more. Kubernetes was created to manage distributed applications, including Docker containers. According to SUSE, Kubernetes is simple to learn, easy to manage, and supports an on-premise, private, public, or hybrid architecture. Kubernetes is flexible enough to be split up over many servers in your data center. "), mdx("p", null, "This simplificator, one example of many, allows one to scale independent containers. "), mdx("p", null, " Let's understand better what Kubernetes is: "), mdx("p", null, " In an application ecosystem of operating system Docker containers, Kubernetes acts as a centralized management guided by distributed logic. Kubernetes can be used to deliver web traffic, graphics work, or IP traffic from IoT devices. The main benefit is that clusters can be easily expanded to a huge size with all functions. "), mdx("p", null, "What are pods? Pods are Docker instances that you can use to deploy your containers in environments like Kubernetes, which can be private, public, or a mix of the two."), mdx("p", null, " Environments may be private services or public clouds. "), mdx("p", null, " Kubernetes can be used to manage containers because they are easy to use and make it easy to scale your containers. "), mdx("p", null, " Installation tutorials are sometimes yoinked without ever reading the help. "), mdx("h3", null, " RBAC and Firewall Security "), mdx("p", null, "Today, everything is hackable, and so is your Kubernetes cluster. Hackers often try to find vulnerabilities in the system in order to exploit them and gain access. So, keeping your Kubernetes cluster secure should be a high priority. The first thing to do is make sure you are using RBAC in Kubernetes. RBAC is role-based access control. Assign roles to each user in your cluster and to each service account running in your cluster. Roles in RBAC contain several permissions that a user or service account can perform. You can assign the same role to multiple people, and each role can have multiple permissions."), mdx("p", null, " RBAC settings can also be applied to namespaces, so if you assign roles to a user allowed in one namespace, they will not have access to other namespaces in the cluster. Kubernetes provides RBAC properties such as role and cluster role to define security policies. "), mdx("p", null, " You can create a firewall for your API server to prevent attackers from sending connection requests to your API server from the Internet. To do this, you can either use regular firewalling rules or port firewalling rules. If you are using something like GKE, you can use a master authorized network feature in order to limit the IP addresses that can access the API server. "), mdx("h3", null, " Managing Kubernetes Clusters "), mdx("p", null, "Kubernetes is a project that lets you create and manage individual containers or a container cluster on a mainframe. Clusters may consist of physical, virtual, or cloud-based computing resources."), mdx(CTA_FullWidth, {
    image: ClusterImg,
    alt: "Multi-Cluster Kubernetes Management with Meshery",
    content: "Multi-Cluster Kubernetes Management with Meshery",
    button_text: "Read blog post",
    url: "/blog/meshery/multi-cluster-kubernetes-management-with-meshery",
    external_link: false,
    className: "get-start-kubernetes-resource",
    mdxType: "CTA_FullWidth"
  }), mdx("p", null, "The Kubernetes projects auto-deploy container clusters anywhere there is a pluggable environment and an open-source base that includes system-config service, service account manager, and kubelet. So, developers and system administrators can easily put containers on a single machine or on nodes of machines in any scalable cluster to save money and time."), mdx("p", null, "Kubernetes is an open-source system for automating the deployment, scaling, and management of containerized applications. Kubernetes was made by Google, and the Cloud Native Computing Foundation now takes care of it."), mdx("h3", null, "Kubernetes Cluster Visualization and Designing using Kanvas"), mdx("p", null, "Kanvas has been developed for visualizing and managing kubernetes clusters. You can learn more about Kanvas ", mdx("a", {
    href: "https://layer5.io/cloud-native-management/kanvas"
  }, "here")), mdx("p", null, "Users can drag-and-drop your cloud native infrastructure using a palette of thousands of versioned Kubernetes components. Integrate advanced performance analysis into your pipeline."), mdx("img", {
    src: KanvasDesigner,
    className: "image-center",
    alt: "Kubernetes Architecture"
  }), mdx("p", null, "Users can deploy their designs, apply patterns, manage and operate their deployments in real-time bringing all the Kubernetes clusters under a common point of management. Interactively connect to terminal sessions or initiate and search log streams from your containers."), mdx("img", {
    src: KanvasVisualizer,
    className: "image-center",
    alt: "Kubernetes Architecture"
  }), mdx("h3", null, " Set Resource Requests & Limits"), mdx("p", null, " Occasionally, deploying an application to a production cluster can fail due to the limited resources available on that cluster. This is a common challenge when working with a Kubernetes cluster, and it\u2019s caused when resource requests and limits are not set. Without resource requests and limits, pods in a cluster can start utilizing more resources than required. If the pod starts consuming more CPU or memory on the node, then the scheduler may not be able to place new pods, and even the node itself may crash. Resource requests specify the minimum amount of resources a container can use. "), mdx("p", null, "For both requests and limits, it\u2019s typical to define CPU in millicores and memory in megabytes or mebibytes. Containers in a pod do not run if the request for resources made is higher than the limit you set."), mdx("p", null, "In this example, we have set the limit of the CPU to 800 millicores and the memory to 256 mebibytes. The maximum request which the container can make at a time is 400 millicores of CPU and 128 mebibyte of memory."), mdx("h3", null, " Guide to Containers "), mdx("p", null, "Containers have been around for a while, but it wasn\u2019t until Docker came along that they really took off. In its early days, developers were using it to build their applications in containers. Now companies like Walmart are using containers to deploy their entire infrastructure."), mdx("p", null, "Containers are lighter-weight than virtual machines because they don't need to emulate an entire operating system. This is why containers are typically faster to start up and use less resources. However, containers cannot be moved between hosts like virtual machines can, so a more robust solution may be needed for this use case."), mdx("p", null, "Because they're so lightweight and take up less space than VMs do, containers are great for running lots of them at once! If your application needs more computing power or memory than your machine can provide on its own, using multiple containers in parallel will help balance out any resource shortages without having to invest in additional physical hardware like you would with traditional VM-based deployments."), mdx("p", null, " As they're isolated from each other, containers are great for running multiple apps at once without worrying about them stepping all over each other's toes! This makes them perfect for things like hosting websites or email services where you want lots of different people to be able to use it at the same time without slowing down or crashing because there's not enough resources available for everyone. "), mdx("p", null, " What's more, since they're so easy to spin up and take down, they're also great for testing out new ideas quickly without having to worry about making permanent changes to your system (or losing any data along the way!). So if you want to try out a new CMS but don't want to go through the trouble of installing it on your machine first, just fire up a container with it inside and see how it goes! "), mdx("p", null, "One downside to using containers is that they can't easily be moved between hosts like virtual machines can, so a more robust solution may be needed for this use case. Fortunately, there are some great open source projects out there that help solve this problem!"), mdx("h3", null, " Conclusion "), mdx("p", null, " Kubernetes is a popular containerization solution that continues to see increasing adoption rates. That being said, using it successfully requires thorough consideration of your workflows and departmental best practices. ")));
}
;
MDXContent.isMDXComponent = true;]]></description><link>https://layer5.io/resources/kubernetes/getting-started-with-kubernetes</link><guid isPermaLink="false">https://layer5.io/resources/kubernetes/getting-started-with-kubernetes</guid><dc:creator><![CDATA[Tolulope Ola-David]]></dc:creator><pubDate>Wed, 02 Nov 2022 00:00:00 GMT</pubDate><enclosure url="https://layer5.io/static/b1a646c34f1a9ed49dcf37dd7b9b4662/kubernetes-logo.svg" length="0" type="image/svg+xml"/><content:encoded></content:encoded></item><item><title><![CDATA[Service Mesh: Istio]]></title><description><![CDATA[var _excluded = ["components"];
function _extends() { return _extends = Object.assign ? Object.assign.bind() : function (n) { for (var e = 1; e < arguments.length; e++) { var t = arguments[e]; for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]); } return n; }, _extends.apply(null, arguments); }
function _objectWithoutProperties(e, t) { if (null == e) return {}; var o, r, i = _objectWithoutPropertiesLoose(e, t); if (Object.getOwnPropertySymbols) { var n = Object.getOwnPropertySymbols(e); for (r = 0; r < n.length; r++) o = n[r], -1 === t.indexOf(o) && {}.propertyIsEnumerable.call(e, o) && (i[o] = e[o]); } return i; }
function _objectWithoutPropertiesLoose(r, e) { if (null == r) return {}; var t = {}; for (var n in r) if ({}.hasOwnProperty.call(r, n)) { if (-1 !== e.indexOf(n)) continue; t[n] = r[n]; } return t; }
/* @jsxRuntime classic */
/* @jsx mdx */

var _frontmatter = {
  "title": "Service Mesh: Istio",
  "date": "2022-08-31 10:30:05 -0530",
  "author": "Deepesha Burse",
  "thumbnail": "../../../../assets/images/service-mesh-icons/istio.svg",
  "darkthumbnail": "../../../../assets/images/service-mesh-icons/istio-white.svg",
  "description": "Explanation of Istio",
  "type": "Article",
  "published": true,
  "category": "Service Mesh",
  "mesh": "Istio",
  "tags": ["Service Mesh", "Istio"],
  "resource": true
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = "wrapper";
return function MDXContent(_ref) {
  var components = _ref.components,
    props = _objectWithoutProperties(_ref, _excluded);
  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: "MDXLayout"
  }), mdx(ResourcesWrapper, {
    mdxType: "ResourcesWrapper"
  }, mdx("p", null, " Microservice architectures offer some solutions while posing new ones. Application division into separate services makes scaling, updating, and development easier. It also provides you with a lot more moving pieces to connect and secure. It can get quite complicated to manage all of the network services, including load balancing, traffic management, authentication and authorisation, etc. "), mdx("p", null, " Istio, an open-source service mesh created by Google, IBM, and Lyft, enables you to connect, monitor, and secure microservices that are hosted on-premises, in the cloud, or with orchestration systems like Kubernetes and Mesos. The beta version of Istio was announced in the year 2018 in KubeCon on Google Cloud. "), mdx("p", null, " Before moving on to what Istio is and how it works, let us look into what service meshes are and why there was an urgent need for them as microservices started getting used more. "), mdx("h3", null, " Service Mesh "), mdx("p", null, " A service mesh is an infrastructural layer that is used to provide secure communication between different services for on-prem, cloud or multi-cloud infrastructure. It allows us to add features like observability, traffic management, and security without having to add that to our code. The term \"service mesh\" refers to both the kind of software you employ to carry out this pattern and the security or network domain that results from its application. "), mdx("p", null, " Service meshes are divided into two parts: the control plane and the data plane. The control plane's responsibilities include securing the mesh, facilitating service discovery, doing regular health checks, enforcing policies, and handling other operational issues. A central registration of services and their corresponding IP addresses is referred to as service discovery. To share with other services how to communicate with it and to assist enforce rules on which services are allowed to communicate with which other services, the application must be registered on the control plane. "), mdx("p", null, " The communication between services, on the other hand, is handled by the data plane. Because many service mesh solutions use a sidecar proxy to manage data plane connections, the amount of knowledge that the services must have about the network environment is constrained. "), mdx("img", {
    src: serviceMesh,
    className: "image-center",
    alt: "Service Mesh"
  }), mdx("h3", null, " Inside the Istio service mesh "), mdx("p", null, " A data plane and a control plane are logically separate parts of an Istio service mesh.", mdx("ul", null, mdx("li", null, " A group of intelligent proxies (Envoy) that are deployed as sidecars make up the data plane. All network connection among the microservices is mediated and managed by these proxies. Additionally, they gather and compile data on all mesh communications. "), mdx("li", null, " The proxies are controlled and set up by the control plane to route traffic. "))), mdx("img", {
    src: arch,
    className: "image-center",
    alt: "Istio Service Mesh Architecture"
  }), mdx("h4", null, " Envoy "), mdx("p", null, " The data plane of Istio consists of the Envoy sidecar proxy. Envoy is an edge and service proxy that is open source and free that aids in separating network concerns from core applications. Applications don't care about the network topology; they just transmit and receive messages to and from localhost. Envoy is fundamentally a network proxy that operates at the OSI model's L3 and L4 layers. It operates by processing connections through a series of pluggable network filters. Envoy additionally provides support for an extra L7 layer filter for HTTP-based traffic. Envoy also offers excellent support for the HTTP/2 and gRPC transports. "), mdx("p", null, " Many of the features provided by Istio such as security, traffic control, network resiliency are possible due to Envoy. "), mdx("h4", null, " Istiod "), mdx("p", null, " Service discovery, configuration, and certificate management are offered by Istiod. "), mdx("p", null, " High level routing rules that govern traffic behavior are transformed into Envoy-specific configurations by Istiod and propagated to the sidecars during runtime. Any sidecar that complies with the Envoy API can use Pilot, which synthesizes platform-specific service discovery techniques into an abstract form. "), mdx("p", null, " Istio can handle discovery in a variety of settings, including Kubernetes or virtual machines. "), mdx("p", null, " To exert finer control over the traffic in your service mesh, you can ask Istiod to modify the Envoy configuration using the Traffic Management API. "), mdx("p", null, " Strong service-to-service and end-user authentication are made possible by Istiod security's integrated identity and credential management. Istio can be used to enhance unencrypted service mesh traffic. "), mdx("p", null, " Operators can enforce regulations with Istio based on service identity rather than on layer 3 or layer 4 network IDs, which are more prone to instability. Additionally, you can limit who has access to your services by using Istio's authorisation capability. "), mdx("p", null, " In order to enable secure mTLS connection in the data plane, Istiod performs the role of a Certificate Authority (CA) and issues certificates. "), mdx("h3", null, " Features "), mdx("h4", null, " Traffic Management "), mdx("p", null, " Performance is impacted by traffic routing, both within and across clusters, which improves deployment strategy. You can simply manage the flow of traffic and API requests between services using Istio's traffic routing rules. Istio makes it simple to configure critical activities like A/B testing, canary deployments, and staged rollouts with percentage-based traffic divides, as well as service-level attributes like circuit breakers, timeouts, and retries. "), mdx("h4", null, " Observability "), mdx("p", null, " It becomes harder to comprehend behaviour and performance as services become more complicated. Istio produces comprehensive telemetry for each communication taking place within a service mesh. This telemetry makes service activity observable, enabling operators to maintain, optimise, and debug their applications. Even better, you can implement practically all of this instrumentation without making any changes to your applications. Operators are able to fully comprehend how the monitored services are communicating with Istio. "), mdx("p", null, " Detailed metrics, distributed traces, and complete access logs are all included in Istio's telemetry. You get complete and thorough service mesh observability with Istio. "), mdx("h4", null, " Security Capabilities "), mdx("p", null, " Particular security requirements for microservices include defense against man-in-the-middle attacks, adaptable access rules, auditing tools, and mutual TLS. Istio comes with a comprehensive security solution that enables administrators to handle each of these problems. To safeguard your services and data, it offers strong identity, strong policy, transparent TLS encryption, and authentication, authorization, and audit (AAA) tools. "), mdx("p", null, " The security architecture used by Istio is built on security-by-default, and it aims to provide in-depth defense so you may deploy security-conscious apps even across networks with a low level of trust. ")));
}
;
MDXContent.isMDXComponent = true;]]></description><link>https://layer5.io/resources/service-mesh/service-mesh-istio</link><guid isPermaLink="false">https://layer5.io/resources/service-mesh/service-mesh-istio</guid><dc:creator><![CDATA[Deepesha Burse]]></dc:creator><pubDate>Wed, 31 Aug 2022 00:00:00 GMT</pubDate><enclosure url="https://layer5.io/static/731763d720780a49c2ffdfede8c28f4b/istio.svg" length="0" type="image/svg+xml"/><content:encoded></content:encoded></item><item><title><![CDATA[DevOps Adoption: Identifying the Right Metrics]]></title><description><![CDATA[var _excluded = ["components"];
function _extends() { return _extends = Object.assign ? Object.assign.bind() : function (n) { for (var e = 1; e < arguments.length; e++) { var t = arguments[e]; for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]); } return n; }, _extends.apply(null, arguments); }
function _objectWithoutProperties(e, t) { if (null == e) return {}; var o, r, i = _objectWithoutPropertiesLoose(e, t); if (Object.getOwnPropertySymbols) { var n = Object.getOwnPropertySymbols(e); for (r = 0; r < n.length; r++) o = n[r], -1 === t.indexOf(o) && {}.propertyIsEnumerable.call(e, o) && (i[o] = e[o]); } return i; }
function _objectWithoutPropertiesLoose(r, e) { if (null == r) return {}; var t = {}; for (var n in r) if ({}.hasOwnProperty.call(r, n)) { if (-1 !== e.indexOf(n)) continue; t[n] = r[n]; } return t; }
/* @jsxRuntime classic */
/* @jsx mdx */

var _frontmatter = {
  "title": "DevOps Adoption: Identifying the Right Metrics",
  "thumbnail": "./devops-adoption.webp",
  "darkthumbnail": "./devops-adoption.webp",
  "date": "2022-08-23 10:30:05 -0530",
  "category": "DevOps",
  "tags": ["DevOps"],
  "type": "Infographic",
  "featured": false,
  "published": true,
  "resource": true
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = "wrapper";
return function MDXContent(_ref) {
  var components = _ref.components,
    props = _objectWithoutProperties(_ref, _excluded);
  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: "MDXLayout"
  }), mdx(ResourcesWrapper, {
    mdxType: "ResourcesWrapper"
  }, mdx("p", null, "According to Puppet\u2019s State of DevOps Report 2021, 83% of IT professionals report that their organizations have previously implemented DevOps practices or are doing so right now to unlock higher business value, achieve faster time to delivery, and boost security of systems."), mdx("p", null, "However, DevOps teams from many industries frequently struggle to identify the right\xA0metrics to monitor and measure\xA0success. In this ", mdx(Link, {
    to: DevOps,
    mdxType: "Link"
  }, "infographic"), ", we highlight the metrics all DevOps professionals should measure to:"), mdx("ul", null, mdx("li", null, "Identify places in the pipeline to speed up deployments."), mdx("li", null, "Make data-driven decisions to improve the deployment process."), mdx("li", null, "Analyze the speed at which products are reaching the market in comparison to competitors.")), mdx("h3", {
    style: {
      "marginTop": "1rem"
    }
  }, "Monitor\xA0these 5 metrics to understand how to speed up your DevOps toolchain:"), mdx("ul", null, mdx("li", null, "Deployment Time"), mdx("li", null, "Change Failure Rate"), mdx("li", null, "Recovery Time"), mdx("li", null, "Release Cadence"), mdx("li", null, "Lead Time")), mdx(Link, {
    to: DevOps,
    mdxType: "Link"
  }, mdx("img", {
    src: DevOpsAdoption,
    alt: "Right metrics for adopting DevOps"
  }))));
}
;
MDXContent.isMDXComponent = true;]]></description><link>https://layer5.io/resources/devops/devops-adoption-identifying-the-right-metrics</link><guid isPermaLink="false">https://layer5.io/resources/devops/devops-adoption-identifying-the-right-metrics</guid><pubDate>Tue, 23 Aug 2022 00:00:00 GMT</pubDate><enclosure url="https://layer5.io/static/eba4e5898081df468c1c4288ce73623d/devops-adoption.webp" length="0" type="image/webp"/><content:encoded></content:encoded></item><item><title><![CDATA[What is GitOps?]]></title><description><![CDATA[var _excluded = ["components"];
function _extends() { return _extends = Object.assign ? Object.assign.bind() : function (n) { for (var e = 1; e < arguments.length; e++) { var t = arguments[e]; for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]); } return n; }, _extends.apply(null, arguments); }
function _objectWithoutProperties(e, t) { if (null == e) return {}; var o, r, i = _objectWithoutPropertiesLoose(e, t); if (Object.getOwnPropertySymbols) { var n = Object.getOwnPropertySymbols(e); for (r = 0; r < n.length; r++) o = n[r], -1 === t.indexOf(o) && {}.propertyIsEnumerable.call(e, o) && (i[o] = e[o]); } return i; }
function _objectWithoutPropertiesLoose(r, e) { if (null == r) return {}; var t = {}; for (var n in r) if ({}.hasOwnProperty.call(r, n)) { if (-1 !== e.indexOf(n)) continue; t[n] = r[n]; } return t; }
/* @jsxRuntime classic */
/* @jsx mdx */

var _frontmatter = {
  "title": "What is GitOps?",
  "thumbnail": "../../../../assets/images/socialIcons/github-dark.svg",
  "darkthumbnail": "../../../../assets/images/socialIcons/github-light.svg",
  "date": "2022-08-16 10:30:05 -0530",
  "category": "Cloud Native",
  "tags": ["GitOps"],
  "type": "Article",
  "technology": "Kubernetes",
  "product": "Meshery",
  "featured": false,
  "published": true,
  "resource": true
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = "wrapper";
return function MDXContent(_ref) {
  var components = _ref.components,
    props = _objectWithoutProperties(_ref, _excluded);
  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: "MDXLayout"
  }), mdx(ResourcesWrapper, {
    mdxType: "ResourcesWrapper"
  }, mdx("p", null, "GitOps revolves around the central notion that infrastructure can be treated as code. It is an operational framework that incorporates DevOps best practices for infrastructure automation, including version control, collaboration, compliance, and CI/CD tooling, which are often used for application development. Like code, not only can you store your infrastructure configuration in a source code version system, but you can also take your infrastructure configuration and any changes to its configuration through the same change management process that you do when updating your applications and services. In part, GitOps is about change management, and consequently, it is about risk reduction and risk management. When you automate a process and classify the manner in which you systemize the process, risk is reduced through the consistency and series of processes and reviews changes go through."), mdx("p", null, "GitOps is the acknowledgement that declarative systems that everything is (or should be) defined as code. With all code in a source code system, that system becomes the source of truth and in the system of record for how your infrastructure is running. Well, that is, assuming that your infrastructure configuration hasn't drifted from its desired state defined in your source code system. If Git is the source of truth, you cannot run operations manually by executing random commands. Doing so would mean that Git would stop being the only source of truth. Instead, the only goal of operations is to define the desired state as code and store it in git. Then, let the machines synchronize that with the actual state. Such synchronization must be continuous so that the two states are (almost) always in sync. In other words, GitOps is about defining everything as code, storing that code in Git, and letting the machines detect the drift between the desired and the actual state \u2013 and making sure that drifts are resolved as soon as possible, hence resulting in the two states being almost always in sync."), mdx("h2", null, " Principles of GitOps"), mdx("h3", null, " 1) Declarative"), mdx("p", null, " According to this principle, the entire system should have a declarative description. Let us first understand what a system description is. What is committed to your Git repository is called the System Description. One or more files that define each system component and its state will be included in the system description. According to GitOps, the way in which we store those definitions is crucial, and we must do so declaratively. That implies that the description of our system will be saved as data."), mdx("p", null, " In the declarative approach, we specify how we want the system to look not how we can achieve that state. If we want to make any changes, we change the description instead of the series of steps to get there. Declarative configuration is critical for GitOps because it provides a description of the system that an automated agent can understand and utilize to take action."), mdx("h3", null, " 2) Single Source of Truth"), mdx("p", null, " The second principle mandates that we keep that system description inside of Git. Therefore, we decide to maintain the official blueprints, which outline the ideal system state version in Git. A git commit is required if we wish to modify the blueprint. The blueprint can also be called the desired state. This helps developers, testers, operations, security, and automations to have a single reference and keep uniformity in everyone\u2019s vision."), mdx("p", null, " GitOps also improves a system's ability to recover from failure because it's simple to roll back an unsuccessful change or restore the entire system from the repository."), mdx("h3", null, " 3) Automated Change Delivery"), mdx("p", null, " Only automation allows us to apply modifications made to the blueprint to systems already in operation. Delivery of changes is entirely automatic. GitOps doesn't allow manual editing. Because standard workflows only need GitHub, which is such a well-known platform, automation enables changes to be delivered through simpler for developers to use workflows. Additionally, automation standardizes your delivery processes, improving the predictability and consistency of system operations."), mdx("h3", null, " 4) Automated State Control"), mdx("p", null, " The fourth principle uses automation to keep our operating system in alignment with the desired state. Drift is the deviation of the runtime state of our system from the desired state. The system's blueprints and what is actually operating in the system don't match. Therefore, if the operating system drifts from what we have specified in Git, an operator will restore it by bringing it back to the intended condition."), mdx("h2", null, " Benefits of GitOps"), mdx("h3", null, " 1) Improves compliance and security:"), mdx("p", null, " Since teams use a single platform for infrastructure management, a streamlined toolchain reduces attack surfaces. Teams can use the version control system to roll back to a desired state in the event of an assault. GitOps lessens outages and downtime as a result, allowing teams to continue working on projects in a secure environment."), mdx("h3", null, " 2) Boosts productivity and cooperation:"), mdx("p", null, " GitOps includes CI/CD pipelines, Git workflows, and infrastructure as code best practices for software development. These prerequisite tools, knowledge, and skill sets are already present in operations teams, thus adopting GitOps won't need a steep learning curve. GitOps workflows streamline procedures in order to improve visibility, establish a single source of truth, and have a small number of tools on hand."), mdx("h3", null, " 3) Automation enhances developer efficiency and lowers costs:"), mdx("p", null, " Productivity rises with CI/CD tooling and continuous deployment since teams can concentrate on development rather than laboriously manual processes thanks to automation. Since team members can use any language and tools they like before pushing updates to GitHub, GitOps workflows enhance the developer experience. Infrastructure automation increases output and decreases downtime while enabling better cloud resource management, which can also save costs."), mdx("h3", null, " 4) Increases stability and reliability:"), mdx("p", null, " Human mistake is decreased through infrastructure that is codified and repeatable. Code reviews and collaboration are made easier by merge requests, which also assist teams in finding and fixing issues before they are released to the public. Additionally, there is less risk because all infrastructure changes are tracked through merge requests and may be undone if an iteration is unsuccessful. By allowing rollbacks to a more stable state and providing distributed backup copies in the event of a significant outage, Git processes speed up recovery time. GitOps gives teams the freedom to iterate more quickly and release new features without worrying about creating an unstable environment."), mdx("h3", null, " 5) Faster development and deployment:"), mdx("p", null, " GitOps provides quicker and more frequent deployments, making it easier for teams to make a minimum viable change. Teams can ship many times per day and roll back changes if there is a problem by utilizing GitOps best practices. Team members can offer business and customer value more quickly thanks to high velocity deployments. Teams are more flexible and able to react to customer needs more quickly with continuous integration."), mdx("h2", null, " Key Components of a GitOps workflow"), mdx("p", null, " To summarize, the following are the four components we require to a GitOps workflow:"), mdx("ol", null, mdx("li", null, " Git repository: The code and configuration of the application are verified there. "), mdx("li", null, " CD pipeline: It is responsible for building, testing, and deploying the application. "), mdx("li", null, " Application deployment tool: It is employed to manage the target environment's application resources. "), mdx("li", null, " Monitoring system: It keeps tabs on the performance of the application and gives the development team feedback. "))));
}
;
MDXContent.isMDXComponent = true;]]></description><link>https://layer5.io/resources/cloud-native/what-is-gitops</link><guid isPermaLink="false">https://layer5.io/resources/cloud-native/what-is-gitops</guid><pubDate>Tue, 16 Aug 2022 00:00:00 GMT</pubDate><enclosure url="https://layer5.io/static/a8d747801f0e266dbc9bb2b192cd3dc1/github-dark.svg" length="0" type="image/svg+xml"/><content:encoded></content:encoded></item><item><title><![CDATA[Service Mesh: Consul]]></title><description><![CDATA[var _excluded = ["components"];
function _extends() { return _extends = Object.assign ? Object.assign.bind() : function (n) { for (var e = 1; e < arguments.length; e++) { var t = arguments[e]; for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]); } return n; }, _extends.apply(null, arguments); }
function _objectWithoutProperties(e, t) { if (null == e) return {}; var o, r, i = _objectWithoutPropertiesLoose(e, t); if (Object.getOwnPropertySymbols) { var n = Object.getOwnPropertySymbols(e); for (r = 0; r < n.length; r++) o = n[r], -1 === t.indexOf(o) && {}.propertyIsEnumerable.call(e, o) && (i[o] = e[o]); } return i; }
function _objectWithoutPropertiesLoose(r, e) { if (null == r) return {}; var t = {}; for (var n in r) if ({}.hasOwnProperty.call(r, n)) { if (-1 !== e.indexOf(n)) continue; t[n] = r[n]; } return t; }
/* @jsxRuntime classic */
/* @jsx mdx */

var _frontmatter = {
  "title": "Service Mesh: Consul",
  "date": "2022-08-05 10:30:05 -0530",
  "author": "Deepesha Burse",
  "thumbnail": "../../../../assets/images/service-mesh-icons/consul.svg",
  "darkthumbnail": "../../../../assets/images/service-mesh-icons/consul.svg",
  "description": "Explanation of Consul Connect",
  "type": "Article",
  "published": true,
  "category": "Service Mesh",
  "mesh": "Consul",
  "tags": ["Service Mesh", "Consul"],
  "resource": true
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = "wrapper";
return function MDXContent(_ref) {
  var components = _ref.components,
    props = _objectWithoutProperties(_ref, _excluded);
  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: "MDXLayout"
  }), mdx(ResourcesWrapper, {
    mdxType: "ResourcesWrapper"
  }, mdx("h3", null, " What is a Service Mesh? "), mdx("p", null, " A service mesh is a dedicated layer that provides secure service-to-service communication for on-prem, cloud, or multi-cloud infrastructure. Although service meshes are typically used with a microservice architectural pattern, they are useful in any situation involving complex networking. Their functionalities include traffic control, resiliency, observability and security. Traffic steering is used for content and it allows optimal usage of our resources. Service meshes provide control over chaotic situations (which usually arise in complex networks) along with proper identification and policies to enhance security. "), mdx("p", null, " Service meshes can be divided into the control plane and the data plane. The role of the control plane is to secure the mesh, facilitate service discovery, conduct frequent health checks, enforce policies and other operational concerns. Service discovery refers to a central registry of the services and their respective IP addresses. The application needs to be registered on the control plane for it to be able to share with other services how to communicate with it and helps to enforce rules on which service gets to communicate with which other services. "), mdx("p", null, " The data plane, on the other hand, handles the communication between services. The amount of knowledge that the services need to have about the network environment is limited by the fact that many service mesh solutions use a sidecar proxy to conduct data plane connections. "), mdx("img", {
    src: serviceMesh,
    className: "image-center",
    alt: "Service Mesh"
  }), mdx("h3", null, " What is Consul? "), mdx("p", null, " Consul Service Mesh (also known as Consul Connect) provides service-to-service connection authorization and encryption using mutual Transport Layer Security (TLS). Consul is the control plane of the service mesh. Consul can be used with Virtual Machines (VMs), containers, or with container orchestration platforms such as Nomad and Kubernetes. Applications can use sidecar proxies to establish TLS connections for inbound and outbound connections or natively integrate with Connect by using Connect aware SDKs for optimal performance and security. "), mdx("p", null, " It is a multi-networking tool that provides a fully functional service mesh solution to address the networking and security issues associated with running cloud infrastructure and microservices. Consul offers a software technique for segmentation and routing. It also offers advantages such as handling failures, retries, and network observability. You can utilize any of these characteristics alone as required or combine them to create a full service mesh and achieve zero trust security. "), mdx("h3", null, " Architecture "), mdx("p", null, " Consul is a distributed system built for a node cluster to operate on. A physical server, cloud instance, virtual machine, or container can all function as a Consul node. The collection of interconnected nodes that Consul runs on is known as a datacenter. Consul supports multiple datacenters and considers this as a common case. It is expected that there will be many clients and three to five servers in a datacenter. This creates a balance between performance and availability in the event of a breakdown because consensus slows down as more machines are added. The number of clients, however, is unlimited and can easily increase to thousands or tens of thousands. "), mdx("img", {
    src: datacenter,
    className: "image-center",
    alt: "Image of datacenter"
  }), mdx("p", null, " The Consul Agent is responsible for maintaining membership information, registering services, running checks, responding to queries, etc. It is required to run on every node that is a part of the Consul cluster. In some places, client agents may cache data from the servers to make it available locally for performance and reliability. They can either run in server mode or client mode. Client nodes make up for most of the cluster and are lightweight processes. They act as an interface between server nodes for most operations. They run on every node where services are running. "), mdx("p", null, " Along with core agent operations, a server node participates in the consensus quorum. The Raft protocol, which offers excellent consistency and availability in the event of failure, serves as the foundation for the quorum. Because they consume more resources than client nodes, server nodes should run on dedicated instances. "), mdx("img", {
    src: agent,
    className: "image-center",
    alt: "Consul Agent"
  }), mdx("p", null, " A per-service proxy sidecar manages incoming and outgoing service connections by automatically wrapping and verifying TLS connections. Consul includes its own built-in L4 proxy and has first class support for Envoy. Other than this, we can choose to use any other proxy to plug in as well. The following diagram shows how proxies work: "), mdx("img", {
    src: proxy,
    className: "image-center",
    alt: "Side-car proxy"
  }), mdx("p", null, " The lifecycle of a Consul cluster:", mdx("ol", null, mdx("li", null, " An agent is started. "), mdx("li", null, " An agent joins the cluster. "), mdx("li", null, " Information of the agent is communicated throughout the cluster"), mdx("li", null, " Existing servers will begin replicating to the new node. "))), mdx("h3", null, " Benefits and Compatibility of Consul Connect "), mdx("p", null, " New methods of networking are necessary due to the development of cloud infrastructure and microservices designs. There are numerous tools and companies, all of which make different attempts to address the issue. The Consul service mesh solution offers a pure software approach with an emphasis on simplicity and wide compatibility and makes no assumptions about the underlying network. "), mdx("p", null, " Consul service mesh streamlines application deployment into a zero-trust network and makes service discovery easier in complex networking situations. "), mdx("p", null, " Features of Consul Service Mesh:", mdx("br", null), mdx("ol", null, mdx("li", null, " Service Discovery", mdx("p", null, " Consul provides a service catalog, configurable service routing, health checks, automatic load balancing, and geo-failover across multiple instances of the same service. The capacity to control changes in the service landscape of your network becomes essential when new versions of a service are introduced and must coexist with existing instances of the same application, frequently running on different versions. The agent provides a simple service definition format to declare the availability of a service and to potentially associate it with a health check. ")), mdx("li", null, " Zero-trust Security Model", mdx("p", null, " Trust can be exploited and with the increasing number of services, there are higher chances of breach. The Consul service mesh control plane can be configured to enforce mutual TLS (mTLS), and will automatically generate and distribute the TLS certificates for every service in the mesh. The certificates are used for both service identity verification and communication encryption. ")), mdx("li", null, " Simplify Application Security with Intentions", mdx("p", null, " Communication between services is secure within the mesh once the service sidecar proxies have been set up. To designate which services are permitted to communicate with one another, you might want to build a more granular set of policies. Consul Intentions are used to limit which services can make requests or create connections and define access control for services through Connect. We can manage intentions via the UI, CLI, or API. The proxy or a natively integrated application enforces intentions on inbound connections or requests. ")))), mdx("p", null, " Compatibility of Consul Connect:", mdx("br", null), mdx("ol", null, mdx("li", null, " First-Class Kubernetes Support", mdx("p", null, " By offering an official Helm chart for installing, configuring, and upgrading Consul on Kubernetes, Consul enables first-class Kubernetes support. The chart automates Kubernetes's Consul service mesh installation and configuration. ")), mdx("li", null, " Platform Agnostic and Multi-Cluster Mesh", mdx("p", null, " Consul works with all cloud providers and architectures. You can expand the scope of your Kubernetes clusters to include services that aren't run using Kubernetes by using the service catalog sync and auto-join features. In order to facilitate safe service-to-service communication between Nomad tasks and jobs, Consul additionally interfaces with HashiCorp Nomad. "))))));
}
;
MDXContent.isMDXComponent = true;]]></description><link>https://layer5.io/resources/service-mesh/service-mesh-consul</link><guid isPermaLink="false">https://layer5.io/resources/service-mesh/service-mesh-consul</guid><dc:creator><![CDATA[Deepesha Burse]]></dc:creator><pubDate>Fri, 05 Aug 2022 00:00:00 GMT</pubDate><enclosure url="https://layer5.io/static/ed21c2c53f2c64e86b016cfdfe7018ae/consul.svg" length="0" type="image/svg+xml"/><content:encoded></content:encoded></item><item><title><![CDATA[Managing Containers]]></title><description><![CDATA[var _excluded = ["components"];
function _extends() { return _extends = Object.assign ? Object.assign.bind() : function (n) { for (var e = 1; e < arguments.length; e++) { var t = arguments[e]; for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]); } return n; }, _extends.apply(null, arguments); }
function _objectWithoutProperties(e, t) { if (null == e) return {}; var o, r, i = _objectWithoutPropertiesLoose(e, t); if (Object.getOwnPropertySymbols) { var n = Object.getOwnPropertySymbols(e); for (r = 0; r < n.length; r++) o = n[r], -1 === t.indexOf(o) && {}.propertyIsEnumerable.call(e, o) && (i[o] = e[o]); } return i; }
function _objectWithoutPropertiesLoose(r, e) { if (null == r) return {}; var t = {}; for (var n in r) if ({}.hasOwnProperty.call(r, n)) { if (-1 !== e.indexOf(n)) continue; t[n] = r[n]; } return t; }
/* @jsxRuntime classic */
/* @jsx mdx */

var _frontmatter = {
  "title": "Managing Containers",
  "thumbnail": "./docker.svg",
  "darkthumbnail": "./docker.svg",
  "date": "2022-07-06 10:30:05 -0530",
  "category": "Kubernetes",
  "type": "Article",
  "technology": "Kubernetes",
  "tags": ["Docker", "Kubernetes"],
  "published": true,
  "resource": true
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = "wrapper";
return function MDXContent(_ref) {
  var components = _ref.components,
    props = _objectWithoutProperties(_ref, _excluded);
  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: "MDXLayout"
  }), mdx(ResourcesWrapper, {
    mdxType: "ResourcesWrapper"
  }, mdx("div", {
    className: "intro"
  }, mdx("p", null, "Learn more about managing containers with our ", mdx("a", {
    className: "blog",
    href: "https://github.com/layer5io/containers-101-workshop"
  }, "Containers 101 Workshop"), ". Walk-through four hands-on exercises with Docker.")), mdx("p", null, "Container management refers to a set of practices that govern and maintain containerization software. Container management tools automate the creation, deployment, destruction and scaling of application or systems containers. Containerization is an approach to software development that isolates processes that share an OS kernel -- unlike virtual machines (VMs), which require their own -- and binds application libraries and dependencies into one deployable unit. This makes containers lightweight to run, as they require only the application configuration information and code from the host OS. This design also increases interoperability compared to VM hosting. Each container instance can scale independently with demand."), mdx("p", null, "Modern Linux container technology was popularized by the Docker project, which started in 2013. Interest soon expanded beyond containerization itself, to the intricacies of how to effectively and efficiently deploy and manage containers."), mdx("p", null, "In 2015, Google introduced the container orchestration platform Kubernetes, which was based on its internal data center management software called Borg. At its most basic level, open source Kubernetes automates the process of running, scheduling, scaling and managing a group of Linux containers. With more stable releases throughout 2017 and 2018, Kubernetes rapidly attracted industry adoption, and today it is the de facto container management technology."), mdx("p", null, "IT teams use containers for cloud-native, distributed -- often microservices- based -- applications, and to package legacy applications for increased portability and efficient deployment. Containers have surged in popularity as IT organizations embrace DevOps, which emphasizes rapid application deployment. Organizations can containerize application code from development through test and deployment."), mdx("h2", null, "Benefits of container management"), mdx("p", null, "The chief benefit of container management is simplified management for clusters of container hosts. IT admins and developers can start, stop and restart containers, as well as release updates or check health status, among other actions. Container management includes orchestration and schedulers, security tools, storage, and virtual network management systems and monitoring."), mdx("h3", null, "Wrangling container sprawl"), mdx("p", null, "Organizations can set policies that ensure containers share a host -- or cannot share a host -- based on application design and resource requirements For example, IT admins should colocate containers that communicate heavily to avoid latency. Or, containers with large resource requirements might require an anti-affinity rule to avoid physical storage overload. Container instances can spin up to meet demand -- then shut down -- frequently. Containers also must communicate for distributed applications to work, without opening an attack surface to hackers."), mdx("p", null, "A container management ecosystem automates orchestration, log management, monitoring, networking, load balancing, testing and secrets management, along with other processes. Automation enables IT organizations to manage large containerized environments that are too vast for a human operator to keep up with."), mdx("h2", null, "Challenges of container management"), mdx("p", null, "One drawback to container management is its complexity, particularly as it relates to open source container orchestration platforms such as Kubernetes and Apache Mesos. The installation and setup for container orchestration tools can be arduous and error prone. IT operations staff need container management skills and training. It is crucial, for example, to understand the relationships between clusters of host servers as well as how the container network corresponds to applications and dependencies."), mdx("p", null, "Issues of persistence and storage present significant container management challenges. Containers are ephemeral -- designed to exist only when needed. Stateful application activities are difficult because any data produced within a container ceases to exist when the container spins down."), mdx("p", null, "Container security is another concern. Container orchestrators have several components, including an API server and monitoring and management tools. These pieces make it a major attack vector for hackers. Container management system vulnerabilities mirror standard types of OS vulnerabilities, such as those related to access and authorization, images and intercontainer network traffic. Organizations should minimize risk with security best practices -- for example, identify trusted image sources and close network connections unless they're needed."), mdx("h2", null, "Container management strategy"), mdx("p", null, "Forward-thinking enterprise IT organizations and startups alike use containers and container management tools to quickly deploy and update applications. IT organizations must first implement the correct infrastructure setup for containers, with a solid grasp of the scope and scale of the containerization project in terms of business projections for growth and developers' requirements. IT admins must also know how the existing infrastructure's pieces connect and communicate to preserve those relationships in a containerized environment. Containers can run on bare-metal servers, VMs or in the cloud -- or in a hybrid setup -- based on IT requirements."), mdx("p", null, "In addition, the container management tool or platform should meet the project's needs for multi-tenancy; user and application isolation; authentication; resource requirements and constraints; logging, monitoring and alerts; backup management; license management; and other management tasks. IT organizations should understand their hosting commitment and future container plans, such as if the company will adopt multiple cloud platforms or a microservices architecture."), mdx("h2", null, "Kubernetes implementation considerations"), mdx("p", null, "As described above, containers are arranged into pods in Kubernetes, which run on clusters of nodes; pods, nodes and clusters are controlled by a master. One pod can include one or multiple containers. IT admins should carefully consider the relationships between pods, nodes and clusters when they set up Kubernetes."), mdx("p", null, "Organizations should plan their container deployment based on how many pieces of the application can scale under load -- this depends on the application, not the deployment method. Additionally, capacity planning is vital for balanced pod-to-node mapping, and IT admins should ensure high availability with redundancy with master node components."), mdx("p", null, "IT organizations can address container security concerns by applying some general IT security best practices to containerization. For example, create multiple security layers throughout the environment, scan all container images for vulnerabilities, enforce signed certificates and run the most up-to-date version of any container or application image. Containers introduce the benefits of an immutable infrastructure methodology as well; the regular disposal and redeployment of containers, with their associated components and dependencies, improves overall system availability and security. Additionally, Kubernetes multi-tenancy promises greater resource isolation, but recently revealed security vulnerabilities make multicluster management preferred for now."), mdx("p", null, "Networking is another significant factor. Kubernetes networking occurs within pods, between pods and in user-to-containerized resource connections. Kubernetes enables pods and nodes to communicate without address translation, allocating subnets as necessary. Lastly, IT admins working with Kubernetes should prepare to troubleshoot common container performance problems, including those caused by unavailable nodes and noisy neighbors, in an implementation.")));
}
;
MDXContent.isMDXComponent = true;]]></description><link>https://layer5.io/resources/kubernetes/managing-containers</link><guid isPermaLink="false">https://layer5.io/resources/kubernetes/managing-containers</guid><pubDate>Wed, 06 Jul 2022 00:00:00 GMT</pubDate><enclosure url="https://layer5.io/static/70f4c7f444e8b3494ddc0fb955f86d40/docker.svg" length="0" type="image/svg+xml"/><content:encoded></content:encoded></item><item><title><![CDATA[Kubernetes Architecture 101]]></title><description><![CDATA[var _excluded = ["components"];
function _extends() { return _extends = Object.assign ? Object.assign.bind() : function (n) { for (var e = 1; e < arguments.length; e++) { var t = arguments[e]; for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]); } return n; }, _extends.apply(null, arguments); }
function _objectWithoutProperties(e, t) { if (null == e) return {}; var o, r, i = _objectWithoutPropertiesLoose(e, t); if (Object.getOwnPropertySymbols) { var n = Object.getOwnPropertySymbols(e); for (r = 0; r < n.length; r++) o = n[r], -1 === t.indexOf(o) && {}.propertyIsEnumerable.call(e, o) && (i[o] = e[o]); } return i; }
function _objectWithoutPropertiesLoose(r, e) { if (null == r) return {}; var t = {}; for (var n in r) if ({}.hasOwnProperty.call(r, n)) { if (-1 !== e.indexOf(n)) continue; t[n] = r[n]; } return t; }
/* @jsxRuntime classic */
/* @jsx mdx */

var _frontmatter = {
  "title": "Kubernetes Architecture 101",
  "thumbnail": "../kubernetes.svg",
  "darkthumbnail": "../kubernetes.svg",
  "date": "2022-07-05 10:30:05 -0530",
  "category": "Kubernetes",
  "type": "Article",
  "technology": "Kubernetes",
  "tags": ["Docker", "Kubernetes"],
  "published": true,
  "resource": true
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = "wrapper";
return function MDXContent(_ref) {
  var components = _ref.components,
    props = _objectWithoutProperties(_ref, _excluded);
  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: "MDXLayout"
  }), mdx(ResourcesWrapper, {
    mdxType: "ResourcesWrapper"
  }, mdx("p", null, "The way Kubernetes is architected is what makes it powerful. Kubernetes has a basic client and server architecture, but it goes way beyond that. Kubernetes has the ability to do rolling updates, it also adapts to additional workloads by auto scaling nodes if it needs to and it can also self-heal in the case of a pod meltdown. These innate abilities provide developers and operations teams with a huge advantage in that your applications will have little to no down time. In this section we provide a brief overview of the master and its worker nodes with a high level overview of how Kubernetes manages workloads."), mdx("div", {
    className: "right"
  }, mdx("img", {
    src: ArchDiagram,
    alt: "Simple Kubernetes Architecture Diagram"
  }), mdx("i", null, "Simple Kubernetes Architecture Diagram")), mdx("h1", null, "Kubernetes Components"), mdx("p", null, "Let's dive into each of the Kubernetes components, starting with the Master node."), mdx("h2", null, "Kubernetes Master"), mdx("p", null, "The Kubernetes master is the primary control unit for the cluster. The master is responsible for managing and scheduling the workloads in addition to the networking and communications across the entire cluster. The master node is responsible for the management of Kubernetes cluster. This is the entry point of all administrative tasks. The master node is the one taking care of orchestrating the worker nodes, where the actual services are running."), mdx("p", null, "These are the components that run on the master:"), mdx("h3", null, "Etcd Storage"), mdx("p", null, "Etcd is an open-source key-value data store that can be accessed by all nodes in the cluster. It stores configuration data of the cluster\u2019s state. etcd is a simple, distributed, consistent key-value store. It\u2019s mainly used for shared configuration and service discovery."), mdx("p", null, "It provides a REST API for CRUD operations as well as an interface to register watchers on specific nodes, which enables a reliable way to notify the rest of the cluster about configuration changes."), mdx("p", null, "An example of data stored by Kubernetes in etcd is jobs being scheduled, created and deployed, pod/service details and state, namespaces and replication information, etc."), mdx("h3", null, "Kube-API-Server"), mdx("p", null, "Kube-API-Server manages requests from the worker nodes, and it receives REST requests for modifications, and serves as a front-end to control cluster. The API server is the entry points for all the REST commands used to control the cluster. It processes the REST requests, validates them, and executes the bound business logic. The result state has to be persisted somewhere, and that brings us to the next component of the master node."), mdx("h3", null, "Kube-scheduler"), mdx("p", null, "Kube-scheduler schedules the pods on nodes based on resource utilization and also decides where services are deployed. The deployment of configured pods and services onto the nodes happens thanks to the scheduler component. The scheduler has the information regarding resources available on the members of the cluster, as well as the ones required for the configured service to run and hence is able to decide where to deploy a specific service."), mdx("h3", null, "Kube-controller-manager"), mdx("p", null, "Kube-controller-manager runs a number of distinct controller processes in the background to regulate the shared state of the cluster and perform routine tasks. When there is a change to a service, the controller recognizes the change and initiates an update to bring the cluster up to the desired state. Optionally you can run different kinds of controllers inside the master node. controller-manager is a daemon embedding those."), mdx("p", null, "A controller uses apiserver to watch the shared state of the cluster and makes corrective changes to the current state to change it to the desired one.\nAn example of such a controller is the Replication controller, which takes care of the number of pods in the system. The replication factor is configured by the user, and it's the controller\u2019s responsibility to recreate a failed pod or remove an extra-scheduled one. Other examples of controllers are endpoints controller, namespace controller, and serviceaccounts controller, but we will not dive into details here."), mdx("h2", null, "Worker Nodes"), mdx("p", null, "These nodes run the workloads according the schedule provided by the master. The interaction between the master and worker nodes are what\u2019s known as the control plane. The pods are run here, so the worker node contains all the necessary services to manage the networking between the containers, communicate with the master node, and assign resources to the containers scheduled."), mdx("h3", null, "Kubelet"), mdx("p", null, "Kubelet ensures that all containers in the node are running and are in a healthy state.  If a node fails, a replication controller observes this change and launches pods on another healthy pod. Integrated into the kubelet binary is \u2018cAdvisor` that auto-discovers all containers and collects CPU, memory, file system, and network usage statistics and also provides machine usage stats by analyzing the \u2018root\u2019 container. "), mdx("p", null, "Kubelet gets the configuration of a pod from the apiserver and ensures that the described containers are up and running. This is the worker service that\u2019s responsible for communicating with the master node. It also communicates with etcd, to get information about services and write the details about newly created ones."), mdx("h3", null, "Kube Proxy"), mdx("p", null, "Kube Proxy acts as a network proxy and a load balancer for a service on a single worker node. . It takes care of the network routing for TCP and UDP packets. It forwards the request to the correct pods across isolated networks in a cluster. "), mdx("h3", null, "Pods"), mdx("p", null, "A pod is the basic building block on Kubernetes. It represents the workloads that get deployed. Pods are generally collections of related containers, but a pod may also only have one container. A pod shares network/storage and also a specification for how to run the containers."), mdx("h3", null, "Containers"), mdx("p", null, "Containers are the lowest level of microservice. These are placed inside of the pods and need external IP addresses to view any outside processes. Docker is not the only supported container runtime, but is by far, the most popular. Docker runs on each of the worker nodes, and runs the configured pods. It takes care of downloading the images and starting the containers."), mdx("h3", null, "kubectl"), mdx("p", null, "Kubectl is a command line tool to communicate with the API service and send commands to the master node. kubectl must be configured to communicate with your cluster. If you have multiple clusters, you might try using kubectx, which makes switching between contexts easy."), mdx("h4", null, "Managing objects with kubectl"), mdx("p", null, "You can divide a Kubernetes cluster into multiple environments by using namespaces (e.g., Dev1, Dev2, QA1, QA2, etc.), and each environment can be managed by a different user. One of the inconveniences of writing kubectl commands is that every time you write a command, you need the --namespace option at the end. People often forget this and end up creating objects (pods, services, deployments) in the wrong namespace. "), mdx("p", null, "With this trick, you can set the namespace preference before running kubectl commands. Run the following command before executing the kubectl commands, and it will save the namespace for all subsequent kubectl commands for your current context:"), mdx("pre", null, mdx("code", {
    parentName: "pre"
  }, "kubectl config set-context $(kubectl config current-context) --namespace=mynamespace\n"))));
}
;
MDXContent.isMDXComponent = true;]]></description><link>https://layer5.io/resources/kubernetes/kubernetes-architecture-101</link><guid isPermaLink="false">https://layer5.io/resources/kubernetes/kubernetes-architecture-101</guid><pubDate>Tue, 05 Jul 2022 00:00:00 GMT</pubDate><enclosure url="https://layer5.io/static/9287b4a708bb510f64057ea305498b77/kubernetes.svg" length="0" type="image/svg+xml"/><content:encoded></content:encoded></item><item><title><![CDATA[What is Multi-Cluster Kubernetes?]]></title><description><![CDATA[var _excluded = ["components"];
function _extends() { return _extends = Object.assign ? Object.assign.bind() : function (n) { for (var e = 1; e < arguments.length; e++) { var t = arguments[e]; for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]); } return n; }, _extends.apply(null, arguments); }
function _objectWithoutProperties(e, t) { if (null == e) return {}; var o, r, i = _objectWithoutPropertiesLoose(e, t); if (Object.getOwnPropertySymbols) { var n = Object.getOwnPropertySymbols(e); for (r = 0; r < n.length; r++) o = n[r], -1 === t.indexOf(o) && {}.propertyIsEnumerable.call(e, o) && (i[o] = e[o]); } return i; }
function _objectWithoutPropertiesLoose(r, e) { if (null == r) return {}; var t = {}; for (var n in r) if ({}.hasOwnProperty.call(r, n)) { if (-1 !== e.indexOf(n)) continue; t[n] = r[n]; } return t; }
/* @jsxRuntime classic */
/* @jsx mdx */

var _frontmatter = {
  "title": "What is Multi-Cluster Kubernetes?",
  "thumbnail": "./kubernetes.svg",
  "darkthumbnail": "./kubernetes.svg",
  "date": "2022-07-05 10:30:05 -0530",
  "category": "Kubernetes",
  "type": "Article",
  "technology": "Kubernetes",
  "tags": ["Docker", "Kubernetes", "Meshery"],
  "published": true,
  "resource": true
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = "wrapper";
return function MDXContent(_ref) {
  var components = _ref.components,
    props = _objectWithoutProperties(_ref, _excluded);
  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: "MDXLayout"
  }), mdx("p", null, "Learn more about how to wrangle ", mdx(Link, {
    to: "/blog/meshery/multi-cluster-kubernetes-management-with-meshery",
    mdxType: "Link"
  }, "Multiple Kubernetes clusters with Meshery.")), mdx(ResourcesWrapper, {
    mdxType: "ResourcesWrapper"
  }, mdx("p", null, "Developers who work in fast-paced environments face the risk of infrastructure sprawl in their VMs or servers. Even with the rise in containerized deployments on Kubernetes and other platforms, admins still must determine how to efficiently manage hundreds and thousands of clusters for various projects."), mdx("p", null, "Common concerns for an organization\u2019s project deployments include how to run multiple workloads and whether a cluster is large enough to handle the work."), mdx("p", null, "A Kubernetes multi-cluster setup can solve these problems. Multi-cluster architecture is a strategy for spinning up several clusters to achieve better isolation, availability, and scalability. In this type of implementation, an application\u2019s infrastructure is distributed and maintained across multiple clusters. Because this strategy can also make cluster management more difficult, it needs to be handled properly."), mdx("h2", null, "What Is a Kubernetes Multi-Cluster Setup?"), mdx("p", null, "Kubernetes works with clusters to efficiently run and manage workloads."), mdx("p", null, "In Kubernetes multi-cluster orchestration, platforms such as managed services help you to run workloads across multiple clusters and environments. The multiple clusters can be configured within a single physical host, within multiple hosts in the same data center, or even in a single cloud provider across different regions. This allows you to provision your workloads in several clusters, rather than just one."), mdx("p", null, "This type of deployment enables more scalability, availability, and isolation for your workloads and environments. It also enables you to better coordinate the planning, delivery, and management of these environments."), mdx("p", null, "A key feature of multi-cluster Kubernetes architecture is that each cluster is highly independent, managing its internal state for maximum resource provisioning and service configuration."), mdx("h2", null, "Why Use a Kubernetes Multi-Cluster Setup?"), mdx("p", null, "There are multiple use cases for a multi-cluster deployment. You can use it to deploy workloads spanning multiple regions for increased availability, eliminate cloud blast radius, prevent compliance issues, and enforce security around your clusters and tenants."), mdx("p", null, "As your environment grows, so do the potential issues you need to solve in order to align your cluster maintenance with your business needs. Using a Kubernetes multi-cluster setup can help with the following concerns."), mdx("h2", null, "Cluster Discovery and Tenant Isolation"), mdx("p", null, "It is common for projects to exist in dev, staging, and production environments. To achieve this kind of isolation, you require multiple Kubernetes environments."), mdx("p", null, "Conventionally, using namespaces would be enough for discovery and isolation in a single cluster, but Kubernetes isn\u2019t a direct multitenant system. Namespaces are also not great for isolation since any compromise in the namespace means that your cluster is also compromised. Additionally, badly configured applications in a namespace can consume more resources than expected, which impacts other applications in the cluster."), mdx("p", null, "Kubernetes multi-cluster environments enable you to isolate users and projects by cluster, simplifying the process."), mdx("h2", null, "Failover"), mdx("p", null, "Architecting multi-cluster workloads minimizes the downtime issues common within a single cluster, because you can freely transfer the workloads to other running clusters."), mdx("h1", null, "Multi-Cluster, Multitenancy, or a Mix?"), mdx("p", null, "Kubernetes is a complex, high-level platform that offers multiple options for your deployments: single server, multitenant, or multi-cluster."), mdx("p", null, "Multitenancy means a cluster is shared among several workloads, or tenants. Multiple users share the same cluster resources and control plane. Multitenant clusters require fair allocation of resources to the tenants as well as isolation of tenants from each other, in order to minimize the effects of a faulty tenant on other tenants and the overall cluster."), mdx("p", null, "A multi-cluster setup, on the other hand, involves several clusters deployed across one or many data centers. This type of deployment can be used to separate development and production. It improves availability and enhances security around workloads."), mdx("p", null, "The best choice for your organization depends on factors that include the technical expertise of your team, your infrastructure availability, and your budget. Many organizations separate their critical production services from non-critical services by placing them in separate tenants across tiers, teams, locations, or infrastructure providers. Projects that are time- and resource-dependent (where resources are spun up and down on the go) are, however, suitable for multi-cluster architecture."), mdx("h1", null, "When to Use a Multi-Cluster Setup"), mdx("p", null, "To decide whether your projects would function best in a multi-cluster deployment, you first need to define your goals."), mdx("p", null, "You should know the challenges you are trying to solve and how transitioning to a multi-cluster setup would help your organization. Projects that are performance-dependent with workloads that are sensitive to factors like latency can take advantage of the high availability and isolation available in multi-cluster setups. In other words, you can run workloads with intensive computations that don\u2019t need to share resources."), mdx("p", null, "You\u2019ll need to collect workload data and other feedback from your various teams before making a decision. You should assess your teams\u2019 expertise: are they well-versed in provisioning single clusters, even before transitioning to multi-clusters? You\u2019ll also need to evaluate your business model and how such an infrastructure transition could affect your users or customers."), mdx("p", null, "The following are some of the advantages of transitioning to a Kubernetes multi-cluster setup."), mdx("ul", null, mdx("li", null, "Tenant Isolation"), mdx("p", null, "You might want to establish order while accommodating your development teams. The multi-cluster architecture allows workload isolation. For example, you could spin up separate clusters for staging and production."), mdx("p", null, "With multiple clusters, any tenant configuration changes affect only that specific cluster. This way, cluster admins can easily identify issues, run new feature experiments, and carry out workload shifts without troubling other tenants and clusters."), mdx("li", null, "No Single Point of Failure"), mdx("p", null, "Running a single cluster can expose your project to a single point of failure, in\nwhich one malfunctioning component can bring down an entire system. Using a multi-cluster\nenvironment enables you to shift your workloads between clusters so that your projects\ncontinue to function if one cluster is down or even disappears entirely."), mdx("li", null, "No Vendor Lock-In"), mdx("p", null, "There are multiple third-party cloud vendors available with varying resource offerings. Because of evolving resource pricing and models, organizations change their usage models over time as well. A Kubernetes multi-cluster setup ensures your workloads are cloud-agnostic so that you can safely use multiple vendors or move workloads from one cloud to another.")), mdx("p", null, "Kubernetes provisions clusters that run and manage our workloads. Depending on the needs of an organization, Kubernetes deployments can be replicated to have the same workloads accessible across multiple nodes and environments. This concept is called Kubernetes multi-cluster orchestration. It\u2019s simply provisioning your workloads in several Kubernetes clusters (going beyond a single cluster)."), mdx("p", null, "A Kubernetes multi-cluster defines deployment strategies to introduce scalability, availability, and isolation for your workloads and environments. A Kubernetes multi-cluster is fully embraced when an organization coordinates the planning, delivery, and management of several Kubernetes environments using appropriate tools and processes."), mdx("h2", null, "Why Do You Need a Kubernetes Multi-Cluster?"), mdx("p", null, "In simple deployment cases, Kubernetes can spin workloads in a single cluster. However, some cases need advanced deployment models, and for such scenarios, a multi-cluster architecture is suitable and can improve the performance of your workloads."), mdx("p", null, "Simply put, a development team may need a Kubernetes multi-cluster to handle workloads spanning regions, eliminate a cloud blast radius, manage compliance requirements, solve multi-tenancy conflicts, and enforce security around clusters and tenants."), mdx("h3", null, "Cluster Upgrades and Security Management"), mdx("p", null, "Teams that rely heavily on Kubernetes for deployments need to plan for regular upgrades and patches on their environments for comprehensive security fixes."), mdx("p", null, "Running cluster upgrades without due care or proper tools can break more things, and more so when dependent resources are overloaded. Tools like kOPs and Cluster APIs can therefore be used to apply upgrades to your running clusters."), mdx("p", null, "The tools that you install to run your clusters depend entirely on the workloads that your clusters support. How you upgrade a cluster and its tools also depends on how you initially deployed and ran the Kubernetes cluster, that is, whether you\u2019re using a hosted Kubernetes provider or some other means for deployment. Most hosted providers support and handle automatic upgrades, which relieves developers from manual upgrades and patching."), mdx("p", null, "Upgrading a cluster and its toolset follows the approach of upgrading the control plane first, then the nodes in a cluster, followed by upgrading clients such as ", mdx("inlineCode", {
    parentName: "p"
  }, "kubectl"), "."), mdx("h3", null, "Managing Kubernetes Multi-Cluster Complexity"), mdx("p", null, "The complexity of management tasks across multiple Kubernetes clusters greatly increases your the number of clusters increase. You need higher-level view and control as you manage workloads across clusters; need to be able to simply switch between clusters; you need a management plane."), mdx("p", null, mdx(Link, {
    className: "blog",
    to: "/meshery",
    mdxType: "Link"
  }, "  Meshery "), "is the open source, cloud native management plane that enables the adoption, operation, and management of Kubernetes, any service mesh, and their workloads."), mdx("p", null, "MeshSync, a custom controller managed by Meshery Operator, uniquely contains cluster-wide details of all objects across any number of managed clusters separated by Kubernetes Cluster ID."), mdx("h3", null, "Deprovisioning Clusters That Are No Longer Needed"), mdx("p", null, "When you deprovision a cluster, its running resources are also deleted. The control plane resources, the node instances, pods, and stored data are all deleted."), mdx("p", null, "Different hosted Kubernetes providers have varying ways of deleting Kubernetes clusters. For instance, GKE supports deletion of clusters from the Google Cloud CLI and Cloud Console. Other tools for spinning Kubernetes clusters such as kOps and Amazon EKS also support the deletion from their CLIs and consoles."), mdx("p", null, "Suppose you have provisioned your clusters with the Google Kubernetes Engine; you can run the following command in the gcloud CLI to deprovision your clusters that are no longer needed:"), mdx("pre", null, mdx("code", {
    parentName: "pre"
  }, "gcloud container clusters delete CLUSTER_NAME\n")), mdx("p", null, "At this point, you\u2019ve seen the operations around managing a cluster lifecycle, that is, creation, deletion, and upgrading of clusters."), mdx("h2", null, "Conclusion"), mdx("p", null, "Teams want working with clusters to be as easy as possible. This ease in operating clusters can be ensured by managing the cluster lifecycle. In this article, you learned what\u2019s involved in managing a cluster lifecycle. You\u2019ve seen how clusters are created at scale using various tools. You\u2019ve also seen what cluster upgrades and security patch management involve while trying to maintain the health of your clusters."), mdx("p", null, "The complexity of Kubernetes environments does present challenges, but setting clear goals and objectives for deploying your clusters can help you overcome any obstacles as your organization makes the transition."), mdx("p", null, "Finally, multi-cluster deployments are a good choice for organizations that are building highly distributed systems, with geographic and regulatory control in check to help scale workloads beyond the limits of single clusters. Multi-cluster deployment and management is useful for minimizing exposure of production services, preventing access to sensitive data in environments like development and testing. Organizations are now opting to deploy their more critical workloads on separate multiple clusters from their less critical ones.")));
}
;
MDXContent.isMDXComponent = true;]]></description><link>https://layer5.io/resources/kubernetes/what-is-multi-cluster-kubernetes</link><guid isPermaLink="false">https://layer5.io/resources/kubernetes/what-is-multi-cluster-kubernetes</guid><pubDate>Tue, 05 Jul 2022 00:00:00 GMT</pubDate><enclosure url="https://layer5.io/static/9287b4a708bb510f64057ea305498b77/kubernetes.svg" length="0" type="image/svg+xml"/><content:encoded></content:encoded></item><item><title><![CDATA[TechStrong TV Interview]]></title><description><![CDATA[var _excluded = ["components"];
function _extends() { return _extends = Object.assign ? Object.assign.bind() : function (n) { for (var e = 1; e < arguments.length; e++) { var t = arguments[e]; for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]); } return n; }, _extends.apply(null, arguments); }
function _objectWithoutProperties(e, t) { if (null == e) return {}; var o, r, i = _objectWithoutPropertiesLoose(e, t); if (Object.getOwnPropertySymbols) { var n = Object.getOwnPropertySymbols(e); for (r = 0; r < n.length; r++) o = n[r], -1 === t.indexOf(o) && {}.propertyIsEnumerable.call(e, o) && (i[o] = e[o]); } return i; }
function _objectWithoutPropertiesLoose(r, e) { if (null == r) return {}; var t = {}; for (var n in r) if ({}.hasOwnProperty.call(r, n)) { if (-1 !== e.indexOf(n)) continue; t[n] = r[n]; } return t; }
/* @jsxRuntime classic */
/* @jsx mdx */

var _frontmatter = {
  "title": "TechStrong TV Interview",
  "subtitle": "Open Source Summit NA 2022",
  "thumbnail": "./techstrong.webp",
  "darkthumbnail": "./techstrong.webp",
  "date": "2022-06-25 10:30:05 -0530",
  "category": "Interview",
  "tags": ["Interview"],
  "type": "Interview",
  "published": true,
  "resource": true
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = "wrapper";
return function MDXContent(_ref) {
  var components = _ref.components,
    props = _objectWithoutProperties(_ref, _excluded);
  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: "MDXLayout"
  }), mdx(ResourcesWrapper, {
    mdxType: "ResourcesWrapper"
  }, mdx("p", null, "TechStrong TV hosts a variety of live conversations and panel discussions with world\u2019s leading technology experts and leaders at global tech events and user conferences. In this episode of TechStrong TV, straight out of ", mdx(Link, {
    to: "/community/events/open-source-summit-north-america-2022",
    mdxType: "Link"
  }, "Open Source Summit NA 2022"), " , catch guest ", mdx(Link, {
    to: "https://layer5.io/community/members/lee-calcote",
    mdxType: "Link"
  }, "Lee Calcote"), " from Layer5 and host Alan Shimel discuss the power of ", mdx(Link, {
    to: "/projects",
    mdxType: "Link"
  }, "Layer5 projects"), " in managing service meshes, Kubernetes and the rest of your cloud native infrastucture. They also dive into some of the other network-centric CNCF projects like CoreDNS and gRPC. Tune in now!"), mdx(Button, {
    $primary: true,
    $url: "https://digitalanarchist.com/videos/open-source-summit-na-2022/lee-calcote-layer5",
    className: "btn-center",
    mdxType: "Button"
  }, mdx("h3", null, "Check out the TechStrong TV Interview with Layer5!"))));
}
;
MDXContent.isMDXComponent = true;]]></description><link>https://layer5.io/resources/interview/techstrong-tv-interview</link><guid isPermaLink="false">https://layer5.io/resources/interview/techstrong-tv-interview</guid><pubDate>Sat, 25 Jun 2022 00:00:00 GMT</pubDate><enclosure url="https://layer5.io/static/25aeb82dc80044f21493d0295ca3b84b/techstrong.webp" length="0" type="image/webp"/><content:encoded></content:encoded></item><item><title><![CDATA[Istio Virtual Service]]></title><description><![CDATA[var _excluded = ["components"];
function _extends() { return _extends = Object.assign ? Object.assign.bind() : function (n) { for (var e = 1; e < arguments.length; e++) { var t = arguments[e]; for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]); } return n; }, _extends.apply(null, arguments); }
function _objectWithoutProperties(e, t) { if (null == e) return {}; var o, r, i = _objectWithoutPropertiesLoose(e, t); if (Object.getOwnPropertySymbols) { var n = Object.getOwnPropertySymbols(e); for (r = 0; r < n.length; r++) o = n[r], -1 === t.indexOf(o) && {}.propertyIsEnumerable.call(e, o) && (i[o] = e[o]); } return i; }
function _objectWithoutPropertiesLoose(r, e) { if (null == r) return {}; var t = {}; for (var n in r) if ({}.hasOwnProperty.call(r, n)) { if (-1 !== e.indexOf(n)) continue; t[n] = r[n]; } return t; }
/* @jsxRuntime classic */
/* @jsx mdx */

var _frontmatter = {
  "title": "Istio Virtual Service",
  "thumbnail": "../../../../assets/images/service-mesh-icons/istio.svg",
  "darkthumbnail": "../../../../assets/images/service-mesh-icons/istio.svg",
  "date": "2022-06-16 10:30:05 -0530",
  "type": "Article",
  "category": "Service Mesh",
  "mesh": "Istio",
  "technology": "Kubernetes",
  "tags": ["Istio", "Envoy"],
  "featured": false,
  "published": true,
  "resource": true
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = "wrapper";
return function MDXContent(_ref) {
  var components = _ref.components,
    props = _objectWithoutProperties(_ref, _excluded);
  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: "MDXLayout"
  }), mdx(ResourcesWrapper, {
    mdxType: "ResourcesWrapper"
  }, mdx("p", null, "Istio Virtual Service defines a set of traffic routing rules to apply when host is addressed. Each routing rule defines standards for the traffic of a specific protocol. If the traffic is matched, then it is sent to a named destination service defined in the registry."), mdx("p", null, "The source of traffic can also be matched within a routing rule that allows routing to be customized for every specific client context."), mdx("div", {
    className: "fact-left"
  }, mdx("p", null, "The below example on Kubernetes routes all HTTP traffic by default to pods of the reviews service with the label \u201Cversion: v1\u201D. Additionally, HTTP requests with path starting with /wpcatalog/ or /consumercatalog/ will be rewritten to /newcatalog and sent to the pods with label \u201Cversion: v2\u201D.")), mdx("pre", null, mdx("code", {
    parentName: "pre"
  }, "apiVersion: networking.istio.io/v1alpha3\nkind: VirtualService\nmetadata:\n  name: reviews-route\nspec:\n  hosts:\n  - reviews.prod.svc.cluster.local\n  http:\n  - name: \"reviews-v2-routes\"\n    match:\n    - uri:\n        prefix: \"/wpcatalog\"\n    - uri:\n        prefix: \"/consumercatalog\"\n    rewrite:\n      uri: \"/newcatalog\"\n    route:\n    - destination:\n        host: reviews.prod.svc.cluster.local\n        subset: v2\n  - name: \"reviews-v1-route\"\n    route:\n    - destination:\n        host: reviews.prod.svc.cluster.local\n        subset: v1\n\n")), mdx("h2", null, "Virtual Service Configuration Affecting Traffic Routing "), mdx("p", null, "A single Virtual Service can be used to describe all the traffic properties of the hosts, including those for multiple HTTP and TCP ports."), mdx("div", null, mdx("h3", null, "Hosts"), mdx("ul", null, mdx("li", null, "The application traffic created by hosts, clients, servers, and applications that use the network as a transport is contained in the physical network data plane (also known as the forwarding plane). As a result, data plane traffic should never have source or destination IP addresses that are assigned to network elements like routers and switches; instead, it should be originated from and delivered to end devices like PCs and servers. To forward data plane traffic as swiftly as possible, routers and switches use hardware chips called application-specific integrated circuits (ASICs). A forwarding information base is referenced by the physical networking data plane (FIB)."), mdx("li", null, "The destination hosts to which traffic is being sent it could be a DNS name with wildcard prefix or an IP address depending on the platform."))), mdx("div", null, mdx("h3", null, "Gateways"), mdx("ul", null, mdx("li", null, "The names of gateways and sidecars that should apply all these routes. Gateways in other namespaces may be referred to by ", mdx("code", null, " gateway namespace>/gateway name "), "; specifying a gateway with no namespace qualifier is the same as specifying the VirtualService\u2019s namespace."))), mdx("div", null, mdx("h3", null, "HTTP"), mdx("ul", null, mdx("li", null, "An ordered list of route rules for HTTP traffic. The HTTP routes will be applied to the platform service ports named ", mdx("code", null, "\u2018http-\u2019/\u2018http2-\u2019/\u2018grpc-*\u2019, gateway ports with protocol HTTP/HTTP2/GRPC/ TLS-terminated-HTTPS "), " and service entry ports using HTTP/HTTP2/GRPC protocols."), mdx("li", null, "The first rule is matching an incoming request which is used."))), mdx("div", null, mdx("h3", null, "TCP"), mdx("ul", null, mdx("li", null, "An ordered list of all the routing rules for opaque TCP traffic. TCP routes will be applied to any of the port which is not a HTTP or TLS port."))), mdx("div", null, mdx("h3", null, "ExportTo"), mdx("ul", null, mdx("li", null, "Exporting a virtual service allows it to be used by the sidecars and the gateways defined in other namespaces."), mdx("li", null, "If no namespaces are specified then the virtual service is exported to all namespaces by default."))), mdx("h2", null, "Destination"), mdx("p", null, "A destination indicates that the network addressable service to which the request/connection will be sent. A DestinationRule defines policies that apply to traffic intended for a service after routing has occurred."), mdx("pre", null, mdx("code", {
    parentName: "pre"
  }, "apiVersion: networking.istio.io/v1alpha3\nkind: DestinationRule\nmetadata:\n  name: reviews-destination\nspec:\n  host: reviews.prod.svc.cluster.local\n  subsets:\n  - name: v1\n    labels:\n      version: v1\n  - name: v2\n    labels:\n      version: v2\n\n")), mdx("div", {
    className: "fact-left"
  }, mdx("p", null, "A version of the route destination is identified with a reference to a named service subset which should be declared in a corresponding DestinationRule."))));
}
;
MDXContent.isMDXComponent = true;]]></description><link>https://layer5.io/resources/service-mesh/istio-virtual-service</link><guid isPermaLink="false">https://layer5.io/resources/service-mesh/istio-virtual-service</guid><pubDate>Thu, 16 Jun 2022 00:00:00 GMT</pubDate><enclosure url="https://layer5.io/static/731763d720780a49c2ffdfede8c28f4b/istio.svg" length="0" type="image/svg+xml"/><content:encoded></content:encoded></item><item><title><![CDATA[Istio Authorization Policy]]></title><description><![CDATA[var _excluded = ["components"];
function _extends() { return _extends = Object.assign ? Object.assign.bind() : function (n) { for (var e = 1; e < arguments.length; e++) { var t = arguments[e]; for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]); } return n; }, _extends.apply(null, arguments); }
function _objectWithoutProperties(e, t) { if (null == e) return {}; var o, r, i = _objectWithoutPropertiesLoose(e, t); if (Object.getOwnPropertySymbols) { var n = Object.getOwnPropertySymbols(e); for (r = 0; r < n.length; r++) o = n[r], -1 === t.indexOf(o) && {}.propertyIsEnumerable.call(e, o) && (i[o] = e[o]); } return i; }
function _objectWithoutPropertiesLoose(r, e) { if (null == r) return {}; var t = {}; for (var n in r) if ({}.hasOwnProperty.call(r, n)) { if (-1 !== e.indexOf(n)) continue; t[n] = r[n]; } return t; }
/* @jsxRuntime classic */
/* @jsx mdx */

var _frontmatter = {
  "title": "Istio Authorization Policy",
  "thumbnail": "../../../../assets/images/service-mesh-icons/istio.svg",
  "darkthumbnail": "../../../../assets/images/service-mesh-icons/istio.svg",
  "date": "2022-06-01 10:30:05 -0530",
  "type": "Article",
  "category": "Service Mesh",
  "mesh": "Istio",
  "technology": "Docker",
  "tags": ["Istio"],
  "featured": false,
  "published": true,
  "resource": true
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = "wrapper";
return function MDXContent(_ref) {
  var components = _ref.components,
    props = _objectWithoutProperties(_ref, _excluded);
  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: "MDXLayout"
  }), mdx(ResourcesWrapper, {
    mdxType: "ResourcesWrapper"
  }, mdx("div", {
    className: "intro"
  }, mdx("p", null, "Istio is a massive project with a wide range of capabilities and deployment options. We will learn about the Istio\u2019s authorization policy with an example .")), mdx("p", null, mdx("h2", null, "Let\u2019s see Istio\u2019s Security Architecture ")), mdx("p", null, "Before we directly jump into Istio's Authorization policies let's have a glance at Istio's Security architecture. The below diagram is directly referenced from Istio documentation. From the control plane, users can create things like authorization policies authentication policies, and policies will get translated into envoy config and streamed bent the varied proxies that form up the service mesh, on the information plane side there is east-west traffic from service b to c and also the actual communication takes place through sidecar proxies. If the traffic is entering it moves to the Ingress gateway and if it\u2019s leaving it can attend the Egress gateway in between all this we will apply JWT enforcements."), mdx("p", null, mdx("img", {
    src: istiosecurityarch,
    align: "center",
    alt: "comparative spectrum"
  })), mdx("h2", null, " Istio includes a high-level architecture that involves multiple factors such as:"), mdx("p", null, mdx("ul", null, mdx("li", null, "  Certificate Authority for key and certificate management "), mdx("li", null, " Sidecar and perimeter proxies work as Policy Enforcement Points to secure communication between the clients and servers. "), mdx("li", null, " A set of Envoy proxy extensions is there to manage telemetry and auditing "))), mdx("h2", null, " Istio\u2019s Authorization policies"), mdx("p", null, mdx("ul", null, mdx("li", null, "  Workload-to-workload and end-user-to-workload authorization. "), mdx("li", null, " A Simple API includes one single Authorization Policy, which is easy to use and maintain."), mdx("li", null, "Flexible semantics: operators can define custom conditions on Istio attributes, and use DENY and permit actions. "), mdx("li", null, "  High performance: Istio authorization gets enforced natively on the Envoy. "), mdx("li", null, " High compatibility: supports gRPC, HTTP, HTTPS, and HTTP2 natively, additionaly as well as any plain TCP protocols. "))), mdx("h2", null, "Example Authorization Policy"), mdx("p", null, "In this example, we allow access to our service httpbin in namespace foo from any JWT (regardless of the principle) to use the GET method."), mdx("pre", null, mdx("code", {
    parentName: "pre"
  }, "apiVersion: \"security.istio.io/v1beta1\"\nkind: \"AuthorizationPolicy\"\nmetadata:\n  name: \"allow-reads\"\n  namespace: foo\nspec:\n  selector:\n    matchLabels:\n      app: httpbin\n  rules:\n  - from:\n    - source:\n        principals: [\"*\"]\n    to:\n    - operation:\n        methods: [\"GET\"]\n\n")), mdx("h2", null, "Access Flow with Auth Policies"), mdx("p", null, "There is some logic behind how authorization is set given defined AuthorizationPolicies. Below is that the flow as taken directly from the Istio documentation."), mdx("ul", null, mdx("li", null, "If there are any CUSTOM policies that match the request, evaluate and deny the request if the evaluation result's is deny."), mdx("li", null, "If there are any DENY policies that match with the request, deny the request."), mdx("li", null, "If there are not any ALLOW policies for the workload, allow the request."), mdx("li", null, "If any of the ALLOW policies gets match with the request, allow the request."), mdx("li", null, "Deny the request."))));
}
;
MDXContent.isMDXComponent = true;]]></description><link>https://layer5.io/resources/service-mesh/istio-authorization-policy</link><guid isPermaLink="false">https://layer5.io/resources/service-mesh/istio-authorization-policy</guid><pubDate>Wed, 01 Jun 2022 00:00:00 GMT</pubDate><enclosure url="https://layer5.io/static/731763d720780a49c2ffdfede8c28f4b/istio.svg" length="0" type="image/svg+xml"/><content:encoded></content:encoded></item><item><title><![CDATA[Istio Ingress Gateway in Kubernetes]]></title><description><![CDATA[var _excluded = ["components"];
function _extends() { return _extends = Object.assign ? Object.assign.bind() : function (n) { for (var e = 1; e < arguments.length; e++) { var t = arguments[e]; for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]); } return n; }, _extends.apply(null, arguments); }
function _objectWithoutProperties(e, t) { if (null == e) return {}; var o, r, i = _objectWithoutPropertiesLoose(e, t); if (Object.getOwnPropertySymbols) { var n = Object.getOwnPropertySymbols(e); for (r = 0; r < n.length; r++) o = n[r], -1 === t.indexOf(o) && {}.propertyIsEnumerable.call(e, o) && (i[o] = e[o]); } return i; }
function _objectWithoutPropertiesLoose(r, e) { if (null == r) return {}; var t = {}; for (var n in r) if ({}.hasOwnProperty.call(r, n)) { if (-1 !== e.indexOf(n)) continue; t[n] = r[n]; } return t; }
/* @jsxRuntime classic */
/* @jsx mdx */

var _frontmatter = {
  "title": "Istio Ingress Gateway in Kubernetes",
  "thumbnail": "./Istio Ingress Gateway.webp",
  "darkthumbnail": "./Istio Ingress Gateway.webp",
  "date": "2022-04-01 10:30:05 -0530",
  "category": "Service Mesh",
  "tags": ["Gateway"],
  "type": "Article",
  "product": "Meshery",
  "technology": "Kubernetes",
  "mesh": "Istio",
  "featured": false,
  "published": true,
  "resource": true
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = "wrapper";
return function MDXContent(_ref) {
  var components = _ref.components,
    props = _objectWithoutProperties(_ref, _excluded);
  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: "MDXLayout"
  }), mdx(ResourcesWrapper, {
    mdxType: "ResourcesWrapper"
  }, mdx("p", null, "Predominantly, Kubernetes has used an Ingress controller to handle the traffic that enters the cluster from the outside. Istio has replaced all the familiar Ingress resource with new Gateway and VirtualServices resources. They work in sync to route all the traffic into the mesh. Inside the mesh there is no requirement for Gateways since the services can access each other by a cluster local service name."), mdx("h3", null, "Let\u2019s understand the working with a representation"), mdx("p", null, mdx("img", {
    src: Rep,
    align: "center",
    alt: "Istio Ingress Gateway in Kubernetes No Title"
  })), mdx("p", null, mdx("ul", null, mdx("li", null, "Firstly A request is made by a client on a specific port"), mdx("li", null, "Then a load balancer on this port listens and forwards the request to one of the workers in theh cluster on same or a new port"), mdx("li", null, "Inside the cluster the request is routed to the Istio Ingress Gateway which is listened on the port of the load balancer"), mdx("li", null, "The Service forwards the requestto an Istio Ingress Gateway Pod which is managed by a deployment"), mdx("li", null, "The Ingress Gateway Pod is configured by a Gateway and a VirtualService."), mdx("li", null, "The Gateway configures all the ports, protocol, and certificates."), mdx("li", null, "The Virtual Service configures all the routing information to find the correct Servicein it."), mdx("li", null, "The Istio Ingress Gateway Pod routes the request to the application Service."), mdx("li", null, "And lastly, the application Service routes the request to an application Pod which is managed by a deployment."))), mdx("ul", null), mdx("h2", null, "Ingress Gateway Service"), mdx("p", null, "The Ingress Gateway Service must listen to all the ports to be able to forward the traffic to the Ingress Gateway pods. Here we will be using routing to bring all the port numbers back to their initial state."), mdx("p", null, "Note that a Kubernetes Service is not a real service, but, since we are using type: \"NodePort\", all the request will be handled by the kube-proxy provided by Kubernetes and forwarded to a node with a current running pod. Once on the node, an IP-tables is configured a request will be forwarded to the appropriate pod."), mdx("pre", null, mdx("code", {
    parentName: "pre",
    "className": "language-yaml"
  }, "\n# From the istio-ingressgateway service\n  ports:\n  - name: http2\n    nodePort: 30000\n    port: 80\n    protocol: TCP\n  - name: https\n    nodePort: 30443\n    port: 443\n    protocol: TCP\n  - name: mysql\n    nodePort: 30306\n    port: 3306\n    protocol: TCP\n")), mdx("p", null, "If we inspect the service, we will see that it defines more ports than we have describe above. So these ports will be used for all the internal Istio communication."), mdx("h2", null, "Ingress Gateway Deployment"), mdx("p", null, "It's a wrapper around the Envoy proxy and it is configured as the sidecars used inside the service mesh. When a Gateway or VirtualService gets changed, they are detected by the Istio Pilot controller and converts this information to an Envoy configuration and sends it to all the proxies, including the Envoy inside the IngressGateway."), mdx("p", null, "Since container ports are not supposed to be declared in Kubernetes pods, we don't have to declare the ports in the Ingress Gateway Deployment. If we look inside the deployment we can see that there are a number of ports that are already declared anyway. We have to take care about the Ingress Gateway Deployment in SSL certificates. To access the certificates inside the Gateway resources, make sure that we have mounted all the required certificates properly."), mdx("pre", null, mdx("code", {
    parentName: "pre",
    "className": "language-yaml"
  }, "\n# Example represents volume mounts\nvolumeMounts:\n- mountPath: /etc/istio/ingressgateway-certs\n  name: ingressgateway-certs\n  readOnly: true\n- mountPath: /etc/istio/ingressgateway-ca-certs\n  name: ingressgateway-ca-certs\n  readOnly: true\n\n# Example represents volumes\nvolumes:\n- name: ingressgateway-certs\n  secret:\n    defaultMode: 420\n    optional: true\n    secretName: istio-ingressgateway-certs\n- name: ingressgateway-ca-certs\n  secret:\n    defaultMode: 420\n    optional: true\n    secretName: istio-ingressgateway-ca-certs\n")), mdx("h2", null, "The Gateway"), mdx("p", null, "The Gateway resources are used to configure the ports for Envoy and also support for the Kubernetes Ingress. Since all the three ports are exposed with the servies, we need these ports to be handled by the Envoy. It can be handled by declaring one or more Gateways."), mdx("pre", null, mdx("code", {
    parentName: "pre",
    "className": "language-yaml"
  }, "\napiVersion: networking.istio.io/v1alpha3\nkind: Gateway\nmetadata:\n  name: default-gateway\n  namespace: istio-system\nspec:\n  selector:\n    istio: ingressgateway\n  servers:\n\n  - hosts:\n    - '*'\n    port:\n      name: http\n      number: 80\n      protocol: HTTP\n\n  - hosts:\n    - '*'\n    port:\n      name: https\n      number: 443\n      protocol: HTTPS\n    tls:\n      mode: SIMPLE\n      privateKey: /etc/istio/ingressgateway-certs/tls.key\n      serverCertificate: /etc/istio/ingressgateway-certs/tls.crt\n\n  - hosts: # For all the TCP routing this fields will be ignored, but it will be matched\n    - '*'  # with the VirtualService, We use * since it will match anything.\n    port:\n      name: mysql\n      number: 3306\n      protocol: TCP\n")), mdx("h2", null, "VirtualService"), mdx("p", null, "The last interesting resource we have is the VirtualService, it used in concert with the Gateway to configure Envoy."), mdx("p", null, "A general configuration for an HTTP(s) service"), mdx("pre", null, mdx("code", {
    parentName: "pre",
    "className": "language-yaml"
  }, "\napiVersion: networking.istio.io/v1alpha3\nkind: VirtualService\nmetadata:\n  name: counter\nspec:\n  gateways:\n  - default-gateway.istio-system.svc.cluster.local\n  hosts:\n  - counter.lab.example.com\n  http:\n  - match:\n    - uri:\n      prefix: /\n    route:\n    - destination:\n        host: counter\n        port:\n          number: 80\n\n")), mdx("h2", null, "Application Service and Deployment"), mdx("p", null, "The request have now reached the application service and deployment. These are normal Kubernetes resources."), mdx("h2", null, "Extras:"), mdx("h3", null, "Debugging Istio Gateway"), mdx("p", null, "First we will use istioctl to check the configuration status of Istio Ingress Gateway:"), mdx("pre", null, mdx("code", {
    parentName: "pre",
    "className": "language-yaml"
  }, "\n# istioctl proxy-status istio-ingressgateway-5586f47659-r64lb.istio-system\nClusters Match\nListeners Match\nRoutes Match\n\n")), mdx("p", null, "If anything does not get synced with it, try restarting the ingress gateway pod once - it may be possible that it somehow an update got missed. If RDS looked good, we can check access logs of it."), mdx("pre", null, mdx("code", {
    parentName: "pre",
    "className": "language-yaml"
  }, "\n#kubectl get configmap istio -n istio-system -o yaml | grep \"accessLogFile: \"\ndisable access log.\\naccessLogFile: \\\"/dev/stdout\\\"\\n\\n# If accessLogEncoding\n\n")), mdx("p", null, "Once all the access logs are enabled, we can try torequest a few more times and check the logs on the Ingress Gateway:"), mdx("pre", null, mdx("code", {
    parentName: "pre",
    "className": "language-yaml"
  }, "\n# kubectl logs -n istio-system istio-ingressgateway-5586f47659-r64lb | grep -v deprecated\n\n"))));
}
;
MDXContent.isMDXComponent = true;]]></description><link>https://layer5.io/resources/service-mesh/istio-ingress-gateway-in-kubernetes</link><guid isPermaLink="false">https://layer5.io/resources/service-mesh/istio-ingress-gateway-in-kubernetes</guid><pubDate>Fri, 01 Apr 2022 00:00:00 GMT</pubDate><enclosure url="https://layer5.io/static/eec5644b77e71f1ff68a36b674aea59c/Istio Ingress Gateway.webp" length="0" type="image/webp"/><content:encoded></content:encoded></item><item><title><![CDATA[An Introduction to Meshery (Webinar-on-Demand)]]></title><description><![CDATA[var _excluded = ["components"];
function _extends() { return _extends = Object.assign ? Object.assign.bind() : function (n) { for (var e = 1; e < arguments.length; e++) { var t = arguments[e]; for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]); } return n; }, _extends.apply(null, arguments); }
function _objectWithoutProperties(e, t) { if (null == e) return {}; var o, r, i = _objectWithoutPropertiesLoose(e, t); if (Object.getOwnPropertySymbols) { var n = Object.getOwnPropertySymbols(e); for (r = 0; r < n.length; r++) o = n[r], -1 === t.indexOf(o) && {}.propertyIsEnumerable.call(e, o) && (i[o] = e[o]); } return i; }
function _objectWithoutPropertiesLoose(r, e) { if (null == r) return {}; var t = {}; for (var n in r) if ({}.hasOwnProperty.call(r, n)) { if (-1 !== e.indexOf(n)) continue; t[n] = r[n]; } return t; }
/* @jsxRuntime classic */
/* @jsx mdx */

var _frontmatter = {
  "title": "An Introduction to Meshery (Webinar-on-Demand)",
  "thumbnail": "../../../assets/images/meshery/full-logo/meshery-logo-light-text.svg",
  "darkthumbnail": "../../../assets/images/meshery/full-logo/meshery-logo-light-text.svg",
  "date": "2021-11-07 10:30:05 -0530",
  "category": "Meshery",
  "type": "Recorded Webinar",
  "product": "Meshery",
  "tags": ["Network Planes", "Meshery"],
  "featured": false,
  "published": true,
  "resource": true
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = "wrapper";
return function MDXContent(_ref) {
  var components = _ref.components,
    props = _objectWithoutProperties(_ref, _excluded);
  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: "MDXLayout"
  }), mdx(ResourcesWrapper, {
    mdxType: "ResourcesWrapper"
  }, mdx("p", null, mdx(Link, {
    to: "/cloud-native-management/meshery",
    mdxType: "Link"
  }, "Meshery"), " is an open source, vendor-neutral, extensible management plane that enables service mesh users to overcome the challenges of complex virtual networking, empowers them to design and apply patterns containing tried and true best practices, benchmarks the performance of your service mesh deployments and enables developers, operators, and product managers to understand and manage their cloud native services with confidence."), mdx("h3", null, "Let\u2019s learn how to manage service meshes with confidence with the extensible service mesh manager, ", mdx(Link, {
    to: "/cloud-native-management/meshery",
    mdxType: "Link"
  }, "Meshery"), "."), mdx("div", {
    className: "iframe-container"
  }, mdx("iframe", {
    width: "460",
    height: "215",
    src: "https://www.youtube.com/embed/mU8qHUGYsk8",
    loading: "lazy",
    title: "YouTube video player",
    frameBorder: "0",
    allow: "accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture",
    allowFullScreen: true
  }))));
}
;
MDXContent.isMDXComponent = true;]]></description><link>https://layer5.io/resources/meshery/an-introduction-to-meshery-webinar-on-demand</link><guid isPermaLink="false">https://layer5.io/resources/meshery/an-introduction-to-meshery-webinar-on-demand</guid><pubDate>Sun, 07 Nov 2021 00:00:00 GMT</pubDate><enclosure url="https://layer5.io/static/2f4a78ada287ae5dcc2e75fad653f671/meshery-logo-light-text.svg" length="0" type="image/svg+xml"/><content:encoded></content:encoded></item><item><title><![CDATA[Meshery FAQs]]></title><description><![CDATA[var _excluded = ["components"];
function _extends() { return _extends = Object.assign ? Object.assign.bind() : function (n) { for (var e = 1; e < arguments.length; e++) { var t = arguments[e]; for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]); } return n; }, _extends.apply(null, arguments); }
function _objectWithoutProperties(e, t) { if (null == e) return {}; var o, r, i = _objectWithoutPropertiesLoose(e, t); if (Object.getOwnPropertySymbols) { var n = Object.getOwnPropertySymbols(e); for (r = 0; r < n.length; r++) o = n[r], -1 === t.indexOf(o) && {}.propertyIsEnumerable.call(e, o) && (i[o] = e[o]); } return i; }
function _objectWithoutPropertiesLoose(r, e) { if (null == r) return {}; var t = {}; for (var n in r) if ({}.hasOwnProperty.call(r, n)) { if (-1 !== e.indexOf(n)) continue; t[n] = r[n]; } return t; }
/* @jsxRuntime classic */
/* @jsx mdx */

var _frontmatter = {
  "title": "Meshery FAQs",
  "thumbnail": "../../../assets/images/meshery/text-only/meshery-logo-dark-text.webp",
  "darkthumbnail": "../../../assets/images/meshery/text-only/meshery-logo-dark-text.webp",
  "date": "2021-11-03 10:30:05 -0530",
  "category": "FAQ",
  "tags": ["Meshery", "FAQ"],
  "type": "FAQ",
  "product": "Meshery",
  "featured": false,
  "published": true,
  "resource": true
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = "wrapper";
return function MDXContent(_ref) {
  var components = _ref.components,
    props = _objectWithoutProperties(_ref, _excluded);
  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: "MDXLayout"
  }), mdx(ResourcesWrapper, {
    mdxType: "ResourcesWrapper"
  }, mdx("div", null, mdx(FAQ, {
    category: ["Meshery"],
    mdxType: "FAQ"
  }))), ";");
}
;
MDXContent.isMDXComponent = true;]]></description><link>https://layer5.io/resources/faq/meshery-faqs</link><guid isPermaLink="false">https://layer5.io/resources/faq/meshery-faqs</guid><pubDate>Wed, 03 Nov 2021 00:00:00 GMT</pubDate><enclosure url="https://layer5.io/static/2db8d89cdff9c95760d3235b380b39ea/meshery-logo-dark-text.webp" length="0" type="image/webp"/><content:encoded></content:encoded></item><item><title><![CDATA[Layer5 FAQs]]></title><description><![CDATA[var _excluded = ["components"];
function _extends() { return _extends = Object.assign ? Object.assign.bind() : function (n) { for (var e = 1; e < arguments.length; e++) { var t = arguments[e]; for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]); } return n; }, _extends.apply(null, arguments); }
function _objectWithoutProperties(e, t) { if (null == e) return {}; var o, r, i = _objectWithoutPropertiesLoose(e, t); if (Object.getOwnPropertySymbols) { var n = Object.getOwnPropertySymbols(e); for (r = 0; r < n.length; r++) o = n[r], -1 === t.indexOf(o) && {}.propertyIsEnumerable.call(e, o) && (i[o] = e[o]); } return i; }
function _objectWithoutPropertiesLoose(r, e) { if (null == r) return {}; var t = {}; for (var n in r) if ({}.hasOwnProperty.call(r, n)) { if (-1 !== e.indexOf(n)) continue; t[n] = r[n]; } return t; }
/* @jsxRuntime classic */
/* @jsx mdx */

var _frontmatter = {
  "title": "Layer5 FAQs",
  "thumbnail": "../../../assets/images/layer5/layer5-only/png/layer5-gradient.webp",
  "darkthumbnail": "../../../assets/images/layer5/layer5-only/png/layer5-gradient.webp",
  "date": "2021-11-02 10:30:05 -0530",
  "category": "FAQ",
  "tags": ["Layer5", "FAQ"],
  "type": "FAQ",
  "featured": false,
  "published": true,
  "resource": true
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = "wrapper";
return function MDXContent(_ref) {
  var components = _ref.components,
    props = _objectWithoutProperties(_ref, _excluded);
  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: "MDXLayout"
  }), mdx(ResourcesWrapper, {
    mdxType: "ResourcesWrapper"
  }, mdx("div", null, mdx(FAQ, {
    category: ["Layer5"],
    mdxType: "FAQ"
  }))));
}
;
MDXContent.isMDXComponent = true;]]></description><link>https://layer5.io/resources/faq/layer5-faqs</link><guid isPermaLink="false">https://layer5.io/resources/faq/layer5-faqs</guid><pubDate>Tue, 02 Nov 2021 00:00:00 GMT</pubDate><enclosure url="https://layer5.io/static/4817b5f110f099c46c7d31dfcab76aeb/layer5-gradient.webp" length="0" type="image/webp"/><content:encoded></content:encoded></item></channel></rss>